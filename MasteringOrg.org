# -*- mode:org; fill-column:99; -*-

#+title:Mastering Org-Mode
#+subtitle:Version {{{version}}} Last Updated {{{time(%F %R)}}}
#+author:Pinecone062
#+email:pinecone062@gmail.com
#+date:2021-11-13 08:44
#+macro:version Version 0.10.11
#+macro:upload-date (eval (current-time-string))
#+bucket:pinecone-forest.com

{{{version}}} {{{date}}}

* Resources
  :PROPERTIES:
  :unnumbered: t
  :END:
- [[https://orgmode.org][Org Home]]

- [[https://orgmode.org/org.html][Org Manual]]

- [[https://github.com/fniessen/refcard-org-mode][Refcard-Org-Mode]]
  - [[../resources/src/README.html][README.html]]

- [[https://orgmode.org/worg/][Worg Home]]

- [[https://code.orgmode.org/bzg/org-mode][All Org Code]] and [[https://code.orgmode.org/explore/repos][Repos]] and [[https://code.orgmode.org/bzg/org-mode/][Org-Mode Code]]

- [[https://orgmode.org/worg/dev/org-syntax.html][Org Syntax]]

- [[https://orgmode.org/worg/dev/org-element-api.html][Org Element API]]

- [[https://orgmode.org/worg/exporters/org-element-docstrings.html][org-element.el]]

- [[http://ergoemacs.org/emacs/elisp_parse_org_mode.html][Parse Org Mode]]

- [[https://orgmode.org/worg/exporters/][Org Exporters]]

- [[https://bzg.fr/en/some-emacs-org-mode-features-you-may-not-know.html/][Advanced Features]]

- [[http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/][Using org-mode as a Day Planner]] by John Wiegley

- [[http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html][Implementing GTD]]

- [[http://doc.norang.ca/org-mode.html][Organize Your LIfe]]

* Glossary
** Agenda

  - Agenda :: Org can select items based on various criteria and display them in a separate
              buffer. Six different [[*View][view types]] are provided, one of which is ~agenda~: like a
              calendar and shows information for specific dates.  The extracted information is
              displayed in a special /agenda/ buffer.

    + Agenda Files :: The information to be shown is normally collected from all /agenda/
                      files, the files listed in the variable ~org-agenda-files~.  If a
                      directory is part of this list, all files with the extension ~.org~
                      in this directory will be part of the list.  Add and remove files
                      from this list using ~C-c [~ and ~C-c ]~.


      #+NAME:reveal-org-agenda-files
      #+BEGIN_SRC elisp :results pp
      org-agenda-files
      #+END_SRC

      #+RESULTS: reveal-org-agenda-files
      : ("/usr/local/dev/programming/Emacs/Org/Mastering-Org/mastering-org.org" "/usr/local/work/workorg/workcases.org" "/Users/lolh/.org/notes.org")

    + Cycling through agenda files :: ~C-,'~ ~(org-cycle-agenda-files)~

    + Switch between buffers :: ~M-x org-switchb <RET>~ ~iswitchb~ like interface

    + Agenda Dispatcher :: The views are created through a dispatcher, which should be bound to a
         [[*Global Keys][global key]]---for example ~C-c a~.  After pressing ~C-c a~, an additional letter is required
         to execute a command.  ~a~ produces a calendar-like /agenda/ view.  ~t~ produces a list of
         ~TODO~ items.  ~m~ produces headlines matching a ~TAGS~ expression.  There are others as
         well.  See [[https://orgmode.org/manual/Agenda-dispatcher.html#Agenda-dispatcher][Agender Dispatcher]].

** Babel
   - Babel :: [[https://orgmode.org/worg/org-contrib/babel/][active code in Org-mode]]

              Babel is Org-mode's ability to execute source code within Org-mode documents.  Babel
              started life as Org-babel, an extension to Org-mode.  It was integrated into the
              Org-mode core at version 7.0. The author of Babel is Eric Schulte. The secondary
              author is Dan Davison.

              [[https://orgmode.org/worg/org-contrib/babel/languages.html][List of supported languages]] with information on requirements, configuration
              instructions, and pointers to language specific documentation.

   - Babel Tutorial :: https://orgmode.org/worg/org-contrib/babel/intro.html

                       An online set of installation and setup instructions, as well as an overview
                       of the main features of Babel, with plenty of examples.

   - Reference Card :: [[https://org-babel.readthedocs.io/en/latest/][Org Babel Reference Card]]

   - Babel Documentation :: https://orgmode.org/manual/Working-with-source-code.html

   - Literate Programming ::

        [[https://www.jstatsoft.org/article/view/v046i03][A Multi-Language Computing Environment for Literate Programming and Reproducible Research]]

        A journal paper providing the most up to date and complete introduction to using Org-mode
        and Babel for Reproducible research and literate programming.

        [[https://caiorss.github.io/Emacs-Elisp-Programming/Org-mode-recipes.html][Literate Programming Recipes]]

        [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][Introduction to Literate Programming]]

   - Examples and Uses :: [[https://orgmode.org/worg/org-contrib/babel/uses.html][Source Code Blocks: Uses]]

        [[http://eschulte.github.io/org-scraps/][Scraps]]

** Capture

  - Capture :: *Capture* lets you quickly store notes with little interruption of your work
               flow [fn:remember].  Capturing is controlled by ~org-remember.el~.

    + Set Up Capture :: set a default target file for notes, and define a global key for
      capturing new material.
      : (setq org-default-notes-file (concat org-directory "/notes.org"))
      : (define-key global-map "\C-cc" 'org-capture)

    + Use Capture<<capture>> :: ~C-c c~ is the basic command ~(org-capture)~; it has some alternates:

      + ~(org-capture &optional ARG)~ :: ~C-c c~; with a prefix ~C-u C-c c~, find the last stored
           capture; with two prefixes ~C-u C-u C-c c~, visit the last stored capture in a separate
           buffer.  Can also jump to the bookmark ~org-capture-last-stored~.  With a zero prefix
           ~C-0 C-c c~, insert the capture at point.
      + ~(org-capture-finalize)~ :: ~C-c C-c~
      + ~(org-capture-refile)~ :: ~C-c C-w~
      + ~(org-capture-kill)~ :: ~C-c C-k~

[fn:remember] Org’s method for capturing new items is heavily inspired by John Wiegley excellent
~remember.el~ package.]


  - Capture Templates :: You can use templates for different types of capture items, and for
       different target locations.  Because the code is quite complex, you should create new
       templates using the customize interface, using ~C-c c C~.

    See [[https://orgmode.org/manual/Capture-templates.html#Capture-templates][Capture Templates]] for full details

** Category

  - Category :: The /category/ is a broad label assigned to each agenda item.  By default, the
                category is simply derived from the file name.  You can specify a file-wide
                category using the in-buffer setting ~#+CATEGORY: Value~ outside of a heading.  A
                different in-buffer category can be added to a heading, or you can give each entry
                its own category with the ~:CATEGORY:Value~ property.  The AGENDA VIEW uses the
                category as the first item in a line.

** Drawer

  - Drawer (~:DRAWERNAME:~) :: A place to hide content and settings.  A drawer name is delimited by
       colons.  A drawer must be terminated by an ~:END:~ keyword.  Anything can go inside a
       /drawer/ except a heading and another drawer.

       ~C-c C-x d~ :: ~(org-insert-drawer &optional ARG DRAWER)~; interactively insert a drawer at
       point; with an active region, put the region inside a drawer; with a prefix argument, insert
       a /property drawer/ (see [[property-drawer][Property Drawer]]; see [[logbook-drawer][Logbook Drawer]]).

  - Property Drawer (~:PROPERTIES:...:END:~)<<property-drawer>> :: A drawer called ~:PROPERTIES:~,
       inside of which are kept various individual properties.

       ~C-u C-c C-x d~ :: (org-insert-drawer &optional ARG); insert a property drawer below the
       current headline.

  - Logbook Drawer (~:LOGBOOK:...:END:~)<<logbook-drawer>> :: A special drawer to store /state change notes/ and /clock
       times/.  See [[state-change][State Change]].

** Footnote

  - Footnote (~[fn:m]~) :: A footnote is started by a /footnote marker/ in square brackets in
       column 0, no indentation allowed. It ends at the next footnote definition, headline, or
       after two consecutive empty lines.  The /footnote reference/ is simply the /marker/ in
       square brackets, inside text.  Markers always start with ~fn:~.

       Footnote Example:
       : The Org homepage[fn:1] now looks a lot better than it used to.
       : ...
       : [fn:1] The link is: https://orgmode.org

       Footnotes may also be *named footnotes*: ~[fn:name]~ (name must be unique).

       Footnames may also be *inline footnotes*: ~[fn:inline definition]~.  This is basically a
       LaTeX-like anonymous footnote where the definition is given directly at the reference point.

       Finally, a hybrid footnote with both a label and an in-line definition, allowing further
       references to the same footnote.
       : [fn:name:a definition]
** Hyperlink

  - Hyperlink :: A link to another place in a file, another file, Usenet article, email, etc.
                 Links are categorized as /internal/ or /external/.  [[info:org#Handling%20links][Handling Links]]

    + Link Format :: =[[link][Description] ]= where [Description] is optional

    + ~C-c l~ :: ~(org-store-link)~ store a link to the current location (because this is a /global
                 command/, you must create a key binding yourself.

      - Org buffers :: cursor on ~<<target>>~; cursor on headline; ~:CUSTOM_ID:~ property;

      - Email News :: link will point to current thing

      - Web browsers :: EWW, W3, W3M link will point to current URL, with page title as description

      - Files :: link will point to the file, with a search string pointing to the contents of the
                 current line; can create custom functions to select the search string.

    + ~C-c C-l~ :: create or edit a link; all links stored during the current session are part of
                   the history; can access them with ~<UP>~ and ~<DOWN>~ (or ~M-p/n~).

    + ~C-u C-c C-l~ :: a link to a file will be inserted; may use file name completion to select
                       the name of the file.  (Force an absolute path with 2 ~C-u~ prefixes).

    + ~C-c C-o~ or ~<RET>~ :: follow a link; execute a command in a shell link; run an internal
      search; create a TAGS view; compiles an agenda for date; visit an external file; run an
      external program (based on file extension); to visit without running, call with a ~C-u~
      prefix;

    + ~C-c C-x C-v~ :: ~(org-toggle-inline-image)~

    + ~C-c &~ :: return to calling position (using Org's mark ring)

    + ~C-c %~ :: Push current position onto the mark ring to make for an easy return.

    + ~C-c C-x C-n/p~ :: next/previous link

    + Internal Link :: a link that does not look like a URL is considered an /internal link/

      * custom-id link :: ~[[#my-custom-id] ]~, which links to the entry with the
                          ~:CUSTOM_ID:my-custom-id~ property, which must be unique in the file.

      * text link :: ~[[My Target][description] ]~ performs a text search in the current file.  The
                     preferred match is to a /dedicated target/, which is the text in double angle
                     brackets: ~<<My Target>>~.  If there is no dedicated target, then there will
                     be a search for an exact name: ~#+NAME: My Target~, placed just before the
                     element it refers to.  Note that you must use the ~#+CAPTION:~ keyword.
                     Finally, there will be a search for a headline that is exactly the link text,
                     plus optionally ~TODO~ and tags.

                     Use in-buffer completion to insert a link targeting a headline: ~* abc M-<TAB>~

    + External Link :: Link to a file, website, Usenet, or email message, plus more.  An external
                       link is a URL-like locator, starting with a short identifying string and a
                       colon.  See 4.3 External Links for a list of examples.

      - If the description is a file name or URL that points to an image, HTML export will inline
        the image as a clickable link; if there is no description, that image will be inlined
        into the exported HTML file.

** Key

  - ~#+KEY:~ :: *In-buffer setting* ==> See [[https://orgmode.org/org.html#In_002dbuffer-settings][In-Buffer Settings]]

    /In-buffer settings/ start with ‘#+’, followed by a keyword, a colon, and then a word for each
                setting.  There are dozens upon dozens of these.  To see an alphabetical list of
                (most) of them, look in the index under ~#~.  Unfortunately, not all are in the
                index.

    ==> [[https://orgmode.org/org.html#Main-Index][#-Index]]

    You will see numerous /in-buffer settings/ scattered throughout the manual and tutorials, but
                they are not introduced prior, so they can be somewhat cryptic at first.

    In addition to /in-buffer settings/, there is another similar construct called *OPTIONS*
                (~#+OPTIONS:~) which is used to set in-buffer settings as well (primarily for
                export settings).  /Options/ uses a large set of short, abbreviated key-value pairs
                ([[https://orgmode.org/manual/Export-settings.html#Export-settings][Options]]).  Unfortunately, the manual uses the term 'options' for in-buffer
                settings as well as ~OPTIONS~.

** Keyword

  - Keyword :: A ~TODO~ state, e.g. one of: ~TODO~ ~DONE~.  These are the default states.  You can
               customize the states using ~TODO~ kewords, e.g., ~TODO~ -> ~FEEDBACK~ -> ~VERIFY~ ->
               ~DONE~ | ~VERIFIED~.

               Org offers many facets to this functionality, all of which is configurable.  See
               [[https://orgmode.org/manual/Workflow-states.html#Workflow-states][TODO Keywords]] and [[https://orgmode.org/manual/TODO-extensions.html#TODO-extensions][Extended TODO Keywords]].

** Outline

  - Outline :: Org is implemented on top of Outline mode.  Outlines allow a document to be
               organized in a hierarchical structure.  An overview of this structure is achieved by
               *folding* (/hiding/) large parts of the document to show only the general document
               structure and the parts currently being worked on.

    + ~<TAB>~ :: ~(org-cycle &optional ARG)~

         This function has many different semantic meanings depending upon its context and how many
         arguments precede it.

         When point is at the beginning of a headline, rotate the subtree through 3 different
                 states (called /local cycling/): FOLDED -> CHILDREN -> SUBTREE

         When called with a single prefix ~C-u~, rotate the buffer through 3 states (/global
         cycling/): OVERVIEW -> CONTENTS -> SHOW ALL

         When called with two prefix arguments (~C-u C-u~) switch to the startup visibility.

         When called with three prefix arguments (~C-u C-u C-u~) show the entire buffer, including
                 drawers.

    + ~<S-TAB>~ :: ~(org-shifttab & optional ARG)~

         Global visibility cycling (unless within a table; then ~(org-table-previous-field)~;

** Property

  - PROPERTY (~:PROPERTY:value~) ::

       A *property* is a key-value pair associated with an entry.

       Depending on how one is set up, it can be associated with (see
       ~org-use-property-inheritance~):
    - a single entry or
    - with a tree, or
    - with every entry in a file.

    When they are associated with a single entry or with a tree they need to be inserted into a
       special drawer with the name =PROPERTIES=.

    If you want to set properties that can be inherited by any entry in a file, use a line like:
    : #+PROPERTY: var foo=1

    - Define /allowed values/ for a property by setting a property =something_ALL:value1 value2=
      for it or set the variable ~org-global-propertiers~.  It is inherited.  The values are
      space-delimited list entries:
      : #+PROPERTY:something_ALL value1 value2

    - To add to the value of an existing property, append =+= to the property name:
      : #+PROPERTY: var+ bar=2
      It is also possible to add to the values of inherited properties:
      : :Genres+: additional value


  - Property Syntax ::

       Like a tag, a property is delimited on both ends by colons, so this is a property:
       =:A_PROPERTY:Some value=.  The key portion is case-insensitive.  A property can have only
       one entry per property drawer.

       #+BEGIN_EXAMPLE
       *** A Heading
           :PROPERTIES:
           :Title:    value
           :Composer: value
           :Artist:   value
           :END:
       #+END_EXAMPLE


  - Property Commands ::

       - =C-c C-x p= ~(org-set-property)~: Set a property with prompts for name and value.  A
         property drawer is created if necessary.

       - =C-u M-x org-insert-drawer=: Insert a property drawer into the current entry.

  - ~org-use-property-inheritance~ :: Default value is =nil=.

       When =nil=, only the properties directly given in the current entry count.

       Non-=nil= means properties apply also for sublevels.

       When =t=, every property is inherited.

       The value may also be a list of properties that should have inheritance, or a regular
       expression matching properties that should be inherited.

       However, note that some special properties use inheritance under special circumstances (not
       in searches).  Examples are
       - CATEGORY,
       - ARCHIVE,
       - COLUMNS, and the properties ending in "_ALL" when they are used as descriptor for valid
         values of a property.
** Publishing
Publishing Management System

- automatic HTML conversion of projects composed of interlinked Org files
- automatically upload your exported HTML pages and related attachments, such as images and source
  code files, to a web server.
- convert files into PDF,
- combine HTML and PDF conversion so that files are available in both formats on the server.


/Publishing/ means that a file is copied to the destination directory and possibly transformed in
the process.  The default transformation is to export Org files as HTML files through the function
~org-publish-org-to-html~, which calls the HTML exporter.

But you can also publish your content as PDF files using /org-publish-org-to-pdf/, or as ASCII,
Texinfo, etc., using the corresponding functions.

*** Configuration
- /org-publish-project-alist/ ::

     Publishing is configured almost entirely through setting the value of one variable, called
     /org-publish-project-alist/.

     Each element of the list configures one project.  Projects are configured by specifying
     property values.  An element may be in one of the two following forms:

  1. =("project-name" :property value :property value ...)= a well-formed property list with
     alternating keys and values,

  2. =("project-name" :components ("project-name" "project-name" ...))= the individual members of
     the =:components= property are taken to be sub-projects, which group together files requiring
     different publishing options.


  - Project ::

               A *project* defines the set of files that are to be published, as well as the
               publishing configuration to use when publishing those files.

  - Meta-project ::

                    All the components are also published, in the sequence given.

*** Properties
  - Properties (mandatory) ::

    - =:base-directory= ::
         Directory containing publishing source files.

         By default, all files with extension =.org= in the base directory are considered part of
         the project.  This can be modified.

    - =:publishing-directory= ::
         Directory where output files are published.

         You can directly publish to a *webserver* using a file name syntax appropriate for the
         Emacs ~tramp~ package.  Or you can publish to a local directory and use *external tools*
         to upload your website.

    - =:preparation-function= ::
         Function or list of functions to be called before starting the publishing process (for
         example, to run ~make~ for updating files to be published.)  Each preparation function is
         called with a single argument, the /project property list/.

    - =:completion-function= ::
         Function or list of functions called after finishing the publishing process (or example,
         to change permissions of the resulting files).  Each completion function is called with a
         single argument, the /project property list/.

  - Properties (optional) ::

    - =:base-extension= :: extension of source files as a regular expession.  Set this to the
         symbol =any= if you want to get all files in =:base-directory=, even without extension.

    - =:exclude= :: Regular expression to match file names that should not be published.

    - =:include= :: List of files to be included regardless of =:base-extension= and =:exclude=.

    - =:recursive= :: Non-=nil= means, check base-directory recursively for files to publish.

*** Publishing Commands and Options
- Publishing ::

  - ~org-publish-org-to-html~ ::

  - ~org-publish-org-to-pdf~ ::

  - ~org-publish-org-to-org~ ::

       This produces ~file.org~ and puts it in the publishing directory.

       Set =:htmlized-source= to =t= to get an htmlized version of this file ~file.org.html~.

  - ~org-publish-attachment~ ::  Other files like images only need to be copied to the publishing
       destination via this function.

  - =:publishing-function= ::

       For non-Org files, you always need to specify the =:publishing-function=: Function executing
       the publication of a file.  This may also be a list of functions, which are all called in
       turn.  The function should take the specified file, make the necessary transformation, if
       any, and place the result into the destination folder.

       The function must accept three arguments:

    1. a property list containing at least a =:publishing-directory= property

    2. the name of the file to be published

    3. the path to the publishing directory of the output file

  - =:htmlized-source= ::

       Non-nil means, publish htmlized source.


- Export Options ::

                    The *property list* can be used to set many export options for the HTML and
                    LaTeX exporters.  In most cases, these properties correspond to /user
                    variables/ in Org.  When a property is given a value in
                    ~org-publish-project-alist~, its setting overrides the value of the
                    corresponding user variable, if any, during publishing.  Options set within a
                    file override everything.

                    [[https://orgmode.org/manual/Publishing-options.html#Publishing-options][Export Options]]

- Publishing Links ::

     To create a link from one Org file to another, use:
     : ‘[[file:foo.org][The foo]]’
     : ‘[[file:foo.org]]’
     When published, this link becomes a link to ‘foo.html’.  If you also publish the Org source
     file and want to link to it, use an ‘http’ link instead of a ‘file:’ link.  You may also link
     to related files, such as images.

     links between published documents can contain some search option:
     : '[[file:foo.org::*heading]]'
     : '[[file:foo.org::#custom-id]]'
     : '[[file:foo.org::target]]'

- Site Map ::

              The following properties may be used to control publishing of a map of files for a
              given project.

              [[https://orgmode.org/manual/Site-map.html#Site-map][Site Map]]

- Index ::

           Org mode can generate an index across the files of a publishing project.

  - =:makeindex= ::

                    When non-nil, generate an index in the file ~theindex.org~ and publish
                    it as ~theindex.html~.  The file only contains a statement
                    : #+INCLUDE: "theindex.inc"’.
                    You can then build around this include statement by adding a title,
                    style information, etc.

  - =INDEX= Keyword ::

       Index entries are specified with =INDEX= keyword.  An entry that contains an exclamation
       mark creates a sub item.

       #+BEGIN_EXAMPLE
       *** Curriculum Vitae
       #+INDEX: CV
       #+INDEX: Application!CV
       #+END_EXAMPLE
** Refile

  - REFILE :: Refile or copy /captured/ data (see [[capture][Capture]])

    + ~(org-refile)~ :: ~C-c C-w~ Refile the entry or region at point. This command
                        offers possible locations for refiling the entry and lets you
                        select one with completion.  By default, all level 1 headlines in
                        the current buffer are considered to be targets, but you can have
                        more complex definitions across a number of files using variable
                        ~org-refile-targets~.  This command utilizes many different
                        prefix patterns to alter the semantics.  See [[https://orgmode.org/manual/Refile-and-copy.html#Refile-and-copy][Refile and Copy]].

    + ~(org-copy)~ :: Copying works like refiling, except that the original note is not
                      deleted.

** Symbols
#+cindex:symbols
#+findex:@command{org-entity-help}
- ~org-entities-help~ :: displays many \LaTeX\ symbols that can be added and their associated
     commands.

** Tags

   Implement labels and contexts for cross-correlating information by assigning *tags* to
   headlines.  Every headline can contain a list of *:tags:*.

   - Tags :: normal words containing /letters/, /numbers/, /underscores (_)/, and /ampersands (@)/
             delimited by colons =:tag:=.  They can be stacked (called a /list of tags/):
             =:tag1:tag2:=

      ==> See [[https://orgmode.org/org.html#Tags][Tags]]

     + =C-c C-q= :: ~org-set-tags-command~

     + ~C-c C-c~ :: call ~org-set-tags-command~ when on a headline; activate changes to in-buffer
                    settings


   - Inheritance :: All subheadings inherit tags from parent headings

   - =#+FILETAGS:= :: Assign tags to all headings in a file

   - =#+TAGS:= :: Name default tags to choose from for a file

   - =#+STARTUP: noptag= :: disable persistent tags alist

*** Tag Variables

   - ~org-tag-alist~ :: globally defined preferred set of tags

     + /fast tag selection/ mechanism; set globally:
       : (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))
       mutually exclusive groups:
       : (setq org-tag-alist ''((:startgroup . nil) ("@work" . ?w) ("@home" . ?h) (:endgroup . nil) ("laptop" . ?l)))
       set file locally (*must =C-c C-c= toactivate*):
       : #+TAGS: @work(w) @home(h) @tennisclub(t) labtop(l) pc(p)
       mutually exclusive groups:
       : #+TAGS: { @work(w) @home(h) @tennisclub(t) } laptop(l) pc(p)

       =C-c C-c= works to display a splash window; see [[info:org#Setting%20Tags][manual]] for fine tuning splash window.

       A special interface lists:
       - inherited tags
       - tags in current headline
       - list of all valid tags

       Special keys:
       - =<TAB>= : enter any tag
       - =<SPC>= : clear all tags
       - =<RET>= : accept modified set
       - =C-g=   : abort
       - =q=     : abort (if not assigned)
       - =!=     : turn off mutually-exclusve groups
       - =C-c=   : toggle auto-exit

   - ~org-tag-persistent-alist~ :: globally defined in addition to =#+TAGS=

   - ~org-tag-faces~ :: variable in which to specify special faces for specific tags

   - ~org-use-tag-inheritance~ ::

   - ~org-tags-exclude-from-inheritance~ ::

   - ~org-tags-match-list-sublevels~ ::

   - ~org-agenda-use-tag-inheritance~ ::

   - ~org-tags-column~ ::

   - ~org-fast-tag-selection-single-key~ ::

   - ~org-complete-tags-always-offer-all-agenda-tags~ ::

*** Tag Hierarchy

    Tags can be defined in *hierarchies*.  Defining multiple /group tags/ and nesting them creates
    a *hierarchy*.  Can create a /taxonomy/ of terms to classify nodes.  When searching for a group
    tag, the search returns all members of the group and subgroups.

    : #+TAGS: [ GTD : Control Persp ]
    : #+TAGS: [ Control : Context Task ]
    : #+TAGS: [ Persp : Vision Goal AOF Project ]

    - GTD
      + Persp
        - Vision
        - Goal
        - AOF
        - Project
      + Control
        - Context
        - Task


    #+BEGIN_EXAMPLE
         (setq org-tag-alist '((:startgrouptag)
                           ("GTD")
                           (:grouptags)
                           ("Control")
                           ("Persp")
                           (:endgrouptag)
                           (:startgrouptag)
                           ("Control")
                           (:grouptags)
                           ("Context")
                           ("Task")
                           (:endgrouptag)))
    #+END_EXAMPLE

** ~TODO~

  - ~TODO~ STATE CHANGE<<state-change>> :: keep track of when a state change occurred and maybe
       take a note about this change.  You can either record just a timestamp, or a time-stamped
       note for a change.  These records will be inserted after the headline as an itemized list,
       newest first.

       To keep the notes hidden and out of the way, place them into a special drawer called
       ~:LOGBOOK:~.  [[logbook-drawer][Logbook Drawer]]   Globally customize the variable ~org-log-into-drawer~ to get
       this behavior.  You can also set a property called ~:LOG-INTO-DRAWER:DrawerName~.

       ~C-c C-z~ :: ~(org-add-note)~  add a note to the current entry

       To time-stamp when a ~TODO~ is changed to ~DONE~, set the variable ~org-log-done~ to the
       value of ~time~, or use the in-buffer setting of ~#+STARTUP: logdone~.  A line ~CLOSED:
       [timestamp]~ will be inserted.

       To also record a note when cycling a ~TODO~ to ~DONE~, set the variable ~org-log-done~ to
       the value ~note~ instead, or add an in-buffer setting of ~#+STARTUP: lognotedone~.

       To customize special logging for other state changes, see [[https://orgmode.org/manual/Tracking-TODO-state-changes.html#Tracking-TODO-state-changes][Tracking TODO State Changes]]

  - TAG (~:tag:~) :: Words delimited by colons (~:~) added to the end of a headline to give extra
                     context.
    ==> See [[https://orgmode.org/org.html#Tags][Tags]].  They can be stacked (called a /list of tags/): ~:tag1:tag2:~

    Tags are normal words containing /letters/, /numbers/, /underscores (_)/, and /ampersands (@)/.

    + ~C-c C-c~ :: activate changes to in-buffer settings

  - Clocking Time :: Clock the time you spend on a specific task in a project.  When you start
                     working on an item, start the clock.  When you stop, or when you mark ~DONE~,
                     stop the clock.  The corresponding time interval is recorded.  Org will also
                     comput the total time spent on each subtree of a project.  [[info:org#Clocking%20commands][Clocking Commands]]

                     Consider creating global key bindings for ~(org-clock-out)~ and
                     ~(org-clock-in-last)~ 

    + ~C-c C-x C-i~ :: ~(org-clock-in)~ --- inserts the ~CLOCK~ keyword together with a timestamp.

      * ~C-u C-c C-x C-i~ :: select from a list of recently clocked tasks.

      * ~C-u C-u C-c C-x C-i~ :: clock into the task at point and mark it as the /default task/; the
           /default task/ will then be available with ~d~ when selecting a clocking task.

      * ~C-u C-u C-u C-c C-x C-i~ :: force continuous clocking by starting the clock when the last
           clock is stopped.

    + ~C-c C-x C-o~ :: ~(org-clock-out)~ --- stop the clock; inserts another timestamp at the same
                       location where the clock was started.  Computes the resulting time and
                       inserts it.  Have the option of inserting an additional note using the
                       variable: ~org-log-note-clock-out~, or ~#+STARTUP: lognoteclock-out~.

    + ~C-c C-x C-x~ :: ~(org-clock-in-last)~ --- reclock the last clocked task.

      * ~C-u C-c C-x C-x~ :: select the task from the clock history

      * ~C-u C-u C-c C-x C-x~ :: force continuous clocking by starting the clock when the last clock
           is stopped.

    + ~C-c C-x C-e~ :: ~(org-clock-modify-effort-estimate)~

    + ~C-c C-c~ or ~C-c C-y~ :: ~(org-evaluate-time-range)~

    + ~C-S-<up/down>~ :: ~(org-clock-timestamps-up/down)~ --- both timestamps; clock duration
         remains the same

    + ~S-M-<up/down>~ :: ~(org-timestamp-up/down)~ --- timestamp at point, and next or previous

    + ~C-c C-t~ :: ~(org-todo)~ --- changes ~TODO~ to ~DONE~ and stops clock

    + ~C-c C-x C-q~ :: ~(org-clock-cancel)~

    + ~C-c C-x C-j~ :: ~(org-clock-goto)~ --- jumpt to headline of currently clocked-in task

      * ~C-u C-c C-x C-j~ :: select the target task from a list of recently clocked tasks

    + ~C-c C-x C-d~ :: ~(org-clock-display)~ --- display time summaries for each subtree in the
                       current buffer.

    + ~l~ :: in the agenda, ~l~ key shows which tasks have been worked on or closed in a day

** View
 - An organized view of specific types of items through a collection process across all org files.
   1. agenda view --- dated items
   2. todo view --- action items
      + ~C-c a t~ ~(org-todo-list)~ global todo list
      + ~C-c a T~ specific todo keyword
   3. match view --- headlines based upon tags, properties, todo states
      + ~C-c a m~ ~(org-tags-view)~
      + ~C-c a M~ specific tags
   4. search view --- entries with specified keywords
      + ~C-c a s~ ~(org-search-view)~
   5. stuck projects view --- projects that cannot ``move''
   6. custom view --- special searches and combinations of views
      + ~C-c a #~ ~(org-agenda-list-stuck-projects)~

* Org Setup
Org has more than 500 variables for customization.  Org also has per-file settings for some
variables

** Global Keys

The three Org commands:

- ‘org-agenda’: [[*Agenda][Agenda]]
- ‘org-store-link’: [[*Hyperlink][Hyperlink]] (store a link to the current location.)
- ‘org-capture’: [[*Capture][Capture]]


{{{noindent}}} ought to be accessible anywhere in Emacs, not just in Org buffers.
To that effect, you need to bind them to globally available keys, like the ones reserved for users,
[[info:elisp#Key%20Binding%20Conventions][Key Binding Conventions]],

{{{noindent}}} i.e., sequences beginning with =C-c= and then a letter (upper or lower case).  Here
are suggested bindings:

- =C-c a= :: ~org-agenda~   ~(global-set-key (kbd "C-c a") 'org-agenda)~

- =C-c c= :: ~org-capture~  ~(global-set-key (kbd "C-c c") 'org-capture)~

- =C-c l= :: ~org-store-link~ ~(global-set-key (kbd "C-c l") 'org-store-link)~

** Global Defaults

- =org-agenda-inhibit-startup= ::

     Inhibit startup when preparing agenda buffers.  Current value is =nil=.

     When this variable is =t=, the initialization of the Org agenda buffers is inhibited (variable
     =org-startup-folded= is ignored): e.g. the visibility state is not set, the tables are not
     re-aligned, etc.

- =org-display-custom-times= ::

     Non-=nil= means overlay custom formats over all time stamps.  Current value is =nil=.
     Per-file setting:
     : #+STARTUP: customtime

     The formats are defined through the variable =org-time-stamp-custom-formats=.

- =org-footnote-auto-adjust= ::

     Non-nil means automatically adjust footnotes after insert/delete.  Default value is =nil=.
     Current value is =t=.

     When this is t, after each insertion or deletion of a footnote, simple =fn:N= footnotes will
     be renumbered, and all footnotes will be sorted.  If you want to have just sorting or just
     renumbering, set this variable to =sort= or =renumber=.  Per-file settings:
     : #+STARTUP: fnadjust | nofnadjust

- =org-footnote-auto-label= ::

     Non-=nil= means define automatically new labels for footnotes.  Current valus is =t=.
     Possible values are:
     - =nil= : Prompt the user for each label.
     - =t=: Create unique labels of the form =[fn:1]=, =[fn:2]=, etc.
     - =confirm= : Like t, but let the user edit the created value.
     - =random= : Automatically generate a unique, random label.

- =org-footnote-define-inline= ::

     Non-=nil= means define footnotes inline, at reference location.  Current value is =nil=.  When
     =nil=, footnotes will be defined in a special section near the end of the document.  When =t=,
     the =[fn:label:definition]= notation will be used to define the footnote at the reference
     position.

- =org-hide-block-startup= ::

     Non-=nil= means entering Org mode will fold all blocks.  Current value is =nil=.  Per-file
     settings:
     : #+STARTUP: hideblocks | showblocks

- =org-hide-leading-stars= ::

     Non-=nil= means hide the first N-1 stars in a headline.  Default value is =nil=.  Per-file
     settings:
     : #+STARTUP: hidestars | showstars

- =org-log-done= ::

                    Information to record when a task moves to the DONE state.

                    Possible values are:
                    - nil :: Don’t add anything, just change the keyword
                    - time :: Add a time stamp to the task
                    - note :: Prompt for a note and add it with template ‘org-log-note-headings’

- =org-log-note-clock-out= ::

     Non-=nil= means record a note when clocking out of an item.  Current value is =nil=.  Per-file
     settings:
     : #+STARTUP: lognoteclock-out | nolognoteclock-out

- =org-log-repeat= ::

     Non-=nil= means record moving through the DONE state when triggering repeat.  Current value is
     =time=.  Possible values are:
     - =nil= don't force a record
     - =time= record a time stamp
     - =note= prompt for a note and add it with template =org-log-note-headings=

     This variable forces taking a note.

     Per-file settings are:
     : #+STARTUP: nologrepeat | logrepeat | lognoterepeat

     You can have local logging settings for a subtree by setting the LOGGING property to one or
     more of these keywords.

- =org-odd-levels-only= ::

     Non-=nil= means skip even levels and only use odd levels for the outline.  Current value is
     =nil=.  Per-file settings:
     : #+STARTUP: odd | oddeven

- =org-pretty-entities= ::

     Non-=nil= means show entities as UTF8 characters.  Default value is =nil=.  Current value is
     =t=.  Per-file settings:
     : #+STARTUP: entitiespretty | entitiesplain

- =org-put-time-stamp-overlays= ::

- =org-tag-alist= ::

     Default tags available in Org files.  Current value is =nil=.  The value of this variable is
     an =alist=.  One of:
     : (TAG) a string
     : (TAG . SELECT) a character
     : (SPECIAL)
     where =SPECIAL= is one of
     : :startgroup | :startgrouptag | :grouptags | :endgroup | :endgrouptag | :newline
     These keywords are used to define a hierarchy of tags.

     Per-file setting:
     : #+TAGS: tag1 tag2

- =org-time-stamp-custom-formats= ::

     Custom formats for time stamps.  See =format-time-string= for the syntax.  These are overlaid
     over the default ISO format if the variable =org-display-custom-times= is set.

- =org-startup-align-all-tables= ::

     Non-nil means align all tables when visiting a file.  Current value is =nil=.  Per-file
     settings:
     : #+STARTUP: align | noalign

- =org-startup-folded= ::

     Non-=nil= means entering Org mode will switch to OVERVIEW.  Current value is =t=.  Per-file
     settings:
     : #+STARTUP: fold (overview) | nofold (showall) | content | showeverything

- =org-startup-indented= ::

     Non-=nil= means turn on =org-indent-mode= on startup.  Default value is =nil=.  Current value
     is =Globally= (i.e., =t=).  Per-file settings:
     : #+STARTUP: indent
     : #+STARTUP: noindent

- =org-startup-shrink-all-tables= ::

     Non-nil means shrink all table columns with a width cookie.  Current value is =nil=.  Per-file
     setting:
     : #+STARTUP: shrink

- =org-startup-with-inline-images= ::

     Non-nil means show inline images when loading a new Org file.  Current value is =nil=.
     Per-file settings:
     : #+STARTUP: inlineimages | noinlineimages

- =org-time-stamp-custom-formats= ::

     Custom formats for time stamps.  See the function =format-time-string= for the syntax.

     Current value is: ~("<%m/%d/%y %a>" . "<%m/%d/%y %a %H:%M>")~

     These are overlaid over the default ISO format if the variable =org-display-custom-times= is
     set.

- =org-time-stamp-rounding-minutes= ::

     Number of minutes to round time stamps to.  Default value was =(0 5).  Current value is =(6
     6)=.

     These are two values, the first applies when first creating a time stamp. The second applies
     when changing it with the commands ‘S-up’ and ‘S-down’.  When changing the time stamp, this
     means that it will change in steps of N minutes, as given by the second value.  When a setting
     is 0 or 1, insert the time unmodified.

- =org-time-stamp-overlay-formats= ::

     Not current defined.  [[info:org#In-buffer%20Settings][To turn on custom format overlays over timestamps]]

- =org-todo-keywords= ::

     List of TODO entry keyword sequences and their interpretation.  It is a list of sequences.
     Current value is: ~((sequence "TODO" "DONE"))~.  Refer to [[help:org-todo-keywords][Documentation]] for extensive details.
     Per-file settings:
     : #+TODO:
     : #+SEQ_TODO:

** In-Buffer Settings
In-buffer settings start with =#+=, followed by a keyword, a colon, and then a word for each
setting.  Org accepts multiple settings on the same line.  Org also accepts multiple lines for a
keyword.  [[info:org#In-buffer%20Settings][Summary]].

- =C-c C-c= :: Activate new settings added to an Org file

- =#+STARTUP: showall= :: an example of an in-buffer setting.

** Set Up Structure Templates and Org Tempo Snippets

#+CINDEX:snippets
#+CINDEX:Org Tempo
#+CINDEX:templates, structure
#+CINDEX:blocks
#+CINDEX:block templates
Use key bindings to quickly insert empty structural blocks or wrap existing text in blocks.

  #+CINDEX:@code{org-modules}
- ~org-modules~ Org Tempo ::

     ENABLE ORG TEMPO by adding it to ~org-modules~ or by loading it in the Emacs init file using:
     : (require 'org-tempo)

  #+CINDEX:@code{org-tempo-keywords-alist}
- ~org-tempo-keywords-alist~ ::

     Org Tempo expands snippets to structures defined in this and next alist variable.  ORG TEMPO MUST
     FIRST BE LOADED TO WORK.  SEE ABOVE.

     This is an alist of KEY characters and corresponding KEYWORDS, just like
     ‘org-structure-template-alist’.  The tempo snippet "<KEY" will be expanded using the KEYWORD
     value.  It's initial value is:

     #+begin_example
     (("L" . "latex")
      ("H" . "html")
      ("A" . "ascii")
      ("i" . "index"))
     #+end_example

#+CINDEX:@code{org-structure-template-alist}
- ~org-structure-template-alist~ ::

     An alist of keys and structure block types used by ~org-insert-structure-template~.
     VALUES CAN BE CUSTOMIZED (added to, modified, deleted).  It's initial value is:

     #+begin_example
     (("a" . "export ascii")
      ("c" . "center")
      ("C" . "comment")
      ("e" . "example")
      ("E" . "export")
      ("h" . "export html")
      ("l" . "export latex")
      ("q" . "quote")
      ("s" . "src")
      ("v" . "verse"))
     #+end_example

     #+CINDEX:@code{org-insert-structure-template}
- ~org-insert-structure-template~ (=C=c C-,=) ::

     Prompt (using keys, e.g., =a=, =c=, etc.), for a type of block structure, and insert the block
     at point.  If region is active, wrap it in the block.  =#+BEGIN_<TYPE> ... #+END_<TYPE>=

** Agenda and Capture Setup

   - ~org-directory~: ::
     Default location in which to look for Org files (originally =$HOME/org=).  Currently
        =$HOME/.org=.  It is used when:
     1. a capture template specifies a target file (no absolute path)
     2. the value of variable ~org-agenda-files~ is a single file

   - ~org-agenda-files~: ::
     The files to be used for agenda display.  It is originally empty.
     - If an entry is a directory, then all org-files in it will be part of the file list.
     - If the value of the variable is a single file name, this file can contain a list of agenda
       files, which can be given relative to ~org-directory~.  Tilde-expansion and ENVIRONMENT
       variable substitution is also made.
     - Entries may be added to and removed from this list with
       - ~M-x org-agenda-file-to-front~
       - ~M-x org-remove-file~

   - ~org-default-notes-file~: ::
        Default target for storing notes.  It is a fallback file for ~org-capture~, for templates
        that do not specify a target file.
     - Original value was: ~$HOME/.notes~
     - Current value is: =$HOME/.org/notes.org=

   - =C-c c= ~(org-capture)~: ::
                       Capture something using a template from ~org-capture-templates~ and file
                       it.  The captured text is inserted at its target location and an indirect
                       buffer is opened allowing you to edit it.  When done, =C-c C-c= lets you
                       continue with your work.
     - =C-u C-c c= GOTO file without capturing anything

   - ~org-capture-templates~: ::
        Templates for the creation of new entries.  It's default value is =nil=.  Most target
        specifications contain a file name.  If that file name is the empty string, it defaults to
        ~org-default-notes-file~.  When an absolute path is not specified for a target, it is taken
        as relative to ~org-directory~.
     - [[help:org-capture-templates][Documentation]]

** Initial Visibility

- By default, initial global state is OVERVIEW (show only top-level headlines)
  + ~C-u C-u <TAB>~ switch to startup visibility state as determined by ~org-startup-folder~
    variable and VISIBILITY properties.
  + ~org-cycle-global-at-bob~ set to =t=, can use ~<TAB>~ to cycle when point is on the first line

- When ~org-agenda-inihibit-startup~ is non-=nil=, Org does not honor the default visibility state
  when opening a file for the agenda (to speed things up).  It is by default set to =nil=.

- configure with ~org-startup-folded~, or on a per-file basis with =#+STARTUP:=, or per-item basis
  with =VISIBILITY= property.

  Possible values for the first two are:
  + overview|fold
  + content|
  + showall|nofold
  + showeverything

- org startup options on a per-file basis chosen by =#+STARTUP:= option.

- Visibility property for individual entries;

  =#+VISIBILITY: folded | children | content | all=

- ~C-u C-u <TAB>~ Switch to startup visibility state

- ~org-catch-invisible-edits~ can be used to help prevent unintended edits;

** Orb Babel Setup
*** Header Args
- =org-babel-default-header-args= ::

     <<obdha>>System-wide values of header arguments, which defaults to the following value, along with an
     example of how to modify it in the ~.emacs~ file:

     #+begin_src emacs-lisp
     ((:session . "none")
      (:results . "replace")
      (:exports . "code")
      (:cache   . "no")
      (:noweb   . "no")
      (:hlines  . "no")
      (:tangle  . "no"))

     (setq org-babel-default-header-args
         (cons '(:noweb . "yes")
             (assq-delete-all :noweb org-babel-default-header-args)))
     #+end_src

     Each language can have separate default header arguments by customizing the variable
     =org-babel-default-header-args:<LANG>=, where =<LANG>= is the name of the language.

- =PROPERTY= keyword ::

     For header arguments applicable to the buffer, use ‘PROPERTY’ keyword ([[*Property][Property]]) anywhere in
     the Org file.

     : #+PROPERTY: header-args:R  :session *R*
     : #+PROPERTY: header-args    :results silent

- =PROPERTIES= drawer ::

     Header arguments set through Org’s property drawers apply at the sub-tree level on down.  Org
     ignores =org-use-property-inheritance= setting.  They override properties set in
     =org-babel-default-header-args=.  Properties can also define language-specific header
     arguments.

     #+begin_src emacs-lisp
     * heading
       :PROPERTIES:
       :header-args:    :cache yes
       :END:

     * another heading
       :PROPERTIES:
       :header-args:clojure:    :session *clojure-1*
       :header-args:R:          :session *R*
       :END:
     #+end_src

- =HEADER= keyword ::

     Set header arguments for a specific source code block.  Takes precedence over Properties and
     defaults.
     : #+HEADER: :var data=2

*** Code Evaluation
- =org-confirm-babel-evaluate= ::

     Variable {{{samp(confirm before evaluation)}}}.  Require confirmation before interactively
     evaluating code blocks in Org buffers.  The default value of this variable is =t=, meaning
     confirmation is required for any code block evaluation.  Set to =nil= to turn off confirmation
     prompts before code evaluation.  Current value is =nil=.

     This variable can also be set to a function which takes two arguments:
     1. the language of the code block; and
     2. the body of the code block.
     Such a function should then return a non-=nil= value if the user should be prompted for
     execution or =nil= if no prompt is required.  Each source code language can be handled
     separately through this function argument.

- =org-babel-no-eval-on-ctrl-c-ctrl-c= ::

     Remove code block evaluation from the ‘C-c C-c’ key binding.  Default value is =nil=, meaning
     retain the key binding.

- =org-confirm-shell-link-function= ::

     Non-=nil= means ask for confirmation before executing shell links.
     : [[shell:<code>][Label]]
     Just change it to ‘y-or-n-p’ if you want to confirm with a single keystroke rather than having
     to type "yes".  It's current value is ~yes-or-no-p~.

- =org-confirm-elisp-link-function= ::

     Non-=nil= means ask for confirmation before executing Emacs Lisp links.
     : [[elisp:(<code>)][Label]]
     Just change it to ‘y-or-n-p’ if you want to confirm with a single keystroke rather than having
     to type "yes".

**** Python Evaluation
#+cindex:Python, command
- ~org-babel-python-command~ ::

     Name of the command for executing Python code.  You can customize this variable.

     ~org-babel-python-command~ is a variable defined in ~ob-python.el~.  Its value is =python3=.
     Its original value was =python=.

** Integrating Emacs Diary and Appointment Reminders
- ~org-agenda-include-diary~

- ~org-agenda-diary-file~

- ~org-agenda-to-appt~


Emacs contains the calendar and diary by Edward M. Reingold. They are quite complementary to Org.

- Calendar :: The  calendar displays a three-month calendar with  holidays from different countries
  and cultures.

- Diary  :: The  diary  allows you  to  keep  track of  anniversaries,  lunar phases,  sunrise/set,
  recurrent appointments (weekly, monthly) and more.


It can be very useful  to combine output from Org with the diary. In  order to include entries from
the Emacs diary into Org mode’s agenda, you only need to customize the following variable to =t=:

- ~org-agenda-include-diary~ t


If you configure ~org-agenda-diary-file~ to point to an  Org file, Org creates entries in that file.


#+cindex:appointment
Org can  interact with Emacs  appointments notification facility. To  add the appointments  of your
agenda files, use the command:

- ~org-agenda-to-appt~ :: This  command lets you filter  through the list of  your appointments and
  add only those belonging to a specific category or matching a regular expression.



All  diary entries  including holidays,  anniversaries,  etc., are  included in  the agenda  buffer
created by Org  mode.

- ‘<SPC>’, ‘<TAB>’, and ‘<RET>’ :: used from the agenda buffer to jump to the diary file in order
  to edit existing diary entries.
- =i= ::   ~org-agenda-diary-entry~: insert new  entries for the current  date works in  the agenda
  buffer
- ‘S’, ‘M’,  and ‘C’ ::  display Sunrise/Sunset times,  show lunar phases  and to convert  to other
  calendars, respectively.
- 'c' :: used to switch back and forth between calendar and agenda.


*** Diary Expression Entries
    #+cindex:diary, expression entries
    #+cindex:expression entries, diary
However, if you are using  the diary only for expression entries and holidays,  it is faster to not
use the  above setting, but instead  to copy or  even move the entries  into an Org file.  Org mode
evaluates diary-style expression entries, and does it faster.

Note that  the expression entries must  start at the left  margin, no whitespace is  allowed before
them.

#+begin_example
,* Holidays
  :PROPERTIES:
  :CATEGORY: Holiday
  :END:
%%(org-calendar-holiday)   ; special function for holiday names

,* Birthdays
  :PROPERTIES:
  :CATEGORY: Ann
  :END:
%%(org-anniversary 1956  5 14) Arthur Dent is %d years old
%%(org-anniversary 1869 10  2) Mahatma Gandhi would be %d years old
#+end_example

** Exporting Documents
   #+cindex:export
Org can convert and export documents to a variety of other formats while retaining as much
structure (see Document Structure) and markup (see Markup for Rich Contents) as possible.

*** Back-Ends
    #+cindex:back-ends
The libraries responsible for translating Org files to other formats are called /back-ends/.  Org
ships with support for the following back-ends:

- ascii (ASCII format) loaded by default
- beamer (LaTeX Beamer format)
- html (HTML format) loaded by default
- icalendar (iCalendar format) loaded by default
- latex (LaTeX format) loaded by default
- md (Markdown format)
- odt (OpenDocument Text format) loaded by default
- org (Org format)
- texinfo (Texinfo format)
- man (Man page format)

*** Additional Back-Ends
    #+cindex:@file{contrib} directory
Users can install libraries for additional formats from the Emacs packaging system.  More libraries
can be found in the ‘contrib/’ directory.

Additional back-ends can be loaded in either of two ways: 


  #+vindex:@code{org-export-backends}
- by configuring the ~org-export-backends~ variable (using ~customize-variable~), or
- by requiring libraries in the Emacs init file.


For example, to load the Markdown back-end, add this to your Emacs config:

: (require 'ox-md)

*** Exporting Markdown

#+cindex:markdown, export
 - [[https://christiantietze.de/posts/2020/10/org-babel-markdown-to-html/][Convert org-babel Markdown Blocks to HTML]]

** Time

   #+cindex:time, update
   #+cindex:hook, @code{before-save-hook}
   #+cindex:@code{before-save-hook}
   #+cindex:time stamp
To update a time stamp automatically, add hook, ~before-save-hook~:

: (add-hook 'before-save-hook 'time-stamp)

*** Time Stamp Pattern

- ~time-stamp-pattern~ :: variable

     Convenience variable setting all ‘time-stamp’ location and format values.  If you must change them for
some application, do so only in the local variables section of the time-stamped file itself.

     This string has four parts, each of which is optional:

  - ~time-stamp-line-limit~ :: number followed by slash =8/=

  - ~time-stamp-start~ :: regexp identifying the pattern preceding the time stamp

  - ~time-stamp-format~ :: specifies the format of the time stamp inserted

  - ~time-stamp-end~ :: regexp identifying the pattern following the time stamp


- ~time-stamp-format~ :: variable

     Format of the string inserted by M-x time-stamp.  This is a string, used verbatim except for
     character sequences beginning with %.

  - =%4y= :: 4-digit year
  - =%02m= :: month number
  - =%02d= :: day of month
  - =%02H= :: 24-hour clock hour
  - =%02M= :: minutes


- ~format-time-string~ :: built-in function

     : (format-time-string FORMAT-STRING &optional TIME ZONE)

     Use FORMAT-STRING to format the time TIME, or now if omitted or nil. TIME is specified as
     (HIGH LOW USEC PSEC), as returned by ‘current-time’ or ‘file-attributes’.  It can also be a
     single integer number of seconds since the epoch.  The obsolete form (HIGH . LOW) is also
     still accepted.

* Basics
** Org Mode Basics

- http://www.star.bris.ac.uk/bjm/org-basics.html

** Headings

** Todos
Any heading becomes a TODO item by placing that word at its beginning.  The entire context from
which the TODO item emerged is always present.  Because TODO items become scattered throughout your
notes files, Org mode gives you an overview of all the things you have to do.

*** Todo States
By default, TODO entries have one of two states:
- TODO
- DONE


- ~org-todo-keywords~

Org mode allows you to create more extensive states.  These states are stored in the variable
~org-todo-keywords~.  This variables is a list of sequences.  Each sequences starts with a symbol
that is either:

- sequence :: sequence of action steps; keywords requiring action.  These states will select a
  headline for inclusion into the global TODO list.  If one of the keywords is the vertical bar
  "|", the remaining keywords signify that no further action is necessary.  But if "|" is not
  found, then the last keyword is treated as the only DONE state.

  : ((sequence "TODO" "DONE"))

  : (setq org-todo-keywords
  :   '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE "DELEGATED")))

  Cycle an entry through these states with:
  : C-c C-t
  : S-<RIGHT> S-<LEFT>

  Pick the third entry:
  : C-3 C-c C-t

  Use multiple sequences in parallel:
  #+begin_example
  (setq org-todo-keywords
    '((sequence "TODO" "|" "DONE")
      (sequence "REPORT" "BUG" "KNOWCAUSE" "|" "FIXED")
      (sequence "|" "CANCELLED")))
  #+end_example

  To select a sequence:
  : C-u C-u C-c C-t
  : C-S-<RIGHT> C-S-<LEFT>

  Set sequence states in a file:
  : #+SEQ_TODO: KEYWORDS...
  : #+TODO: KEYWORDS...

- type :: different types of TODO items, e.g., "work" or "home", or "Tom"; but you should really
  implement this functionality using Tags instead.

  Set type keywords in a file:
  : #+TYP_TODO

- fast state selection :: Each keyword can specifiy a character for fast state selection in
  conjunction with the variable ~org-use-fast-todo-selection~.  This is done by adding the
  selection character after each keyword in parentheses.  When you press =C-c C-t=, followed by the
  selection key, the entry is switched to this state immediately.  Further, use =<SPC>= to remove a
  TODO keyword from an entry.

  #+begin_example
  (setq org-todo-keywords
        '((sequence "TODO(t)" "|" "DONE(d)")
          (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
          (sequence "|" "CANCELED(c)")))
  #+end_example

- Todo Faces ::
  - ~org-todo~ for keywords indicating that an item still has to be acted upon;
  - ~org-done~ for keywords indicating that an item is finished.

  - ~org-todo-keyword-faces~ for additional faces; if you are using more than two different states,
    you can use special faces for some of them.

  #+begin_example
  (setq org-todo-keyword-faces
         '(("TODO" . org-warning) ("STARTED" . "yellow")
           ("CANCELED" . (:foreground "blue" :weight bold))))
  #+end_example

*** Todo Dependencies
Parent TODOs should not be marked done until all TODO subtasks, or children tasks, are done.
Further, sometimes there is a logical sequence to tasks and subtasks.

- ~org-enforce-todo-dependencies~ :: variable such that Org blocks entries from changing state to
  DONE while they have TODO children that are not DONE.

- =DONE= :: if any entry has a property 'ORDERED', each of its TODO children is blocked until all
  earlier sibligs are marked as done.

** Babel
- https://orgmode.org/worg/org-contrib/babel/

** Dates and Times
#+cindex:dates
#+cindex:times
=TODO= items can be labeled with a date and/or a time.

#+cindex:timestamp
The specially formatted string carrying the date and time information is called a =timestamp=.

*** Timestamps
#+cindex:timestamps
#+cindex:range of times
A timestamp is a specification of a date (possibly with a time or a range of times) in a special
format:

- =<2003-09-16 Tue>=

- =<2003-09-16 Tue 09:39>=

- =<2003-09-16 Tue 12:00-12:30>=


#+cindex:custome time format
#+cindex:agenda
To use an alternative format, see Custom time format.  A timestamp can appear anywhere in the
headline or body of an Org tree entry.  Its presence causes entries to be shown on specific dates
in the agenda (see Weekly/daily agenda).

**** Types of Timestamps

#+cindex:plain timestamp
- Plain timestamp :: A simple timestamp just assigns a date/time to an item.  In the agenda
     display, the headline of an entry associated with a plain timestamp is shown exactly on that
     date.

#+cindex:repeater interval
- Timestamp with repeater interval :: indicates that it applies not only on the given date, but
     again and again after a certain interval

#+cindex:diary-style sexp
#+cindex:calender/diary package
- Diary-style sexp entries :: special display implemented in the Emacs calendar/diary package

#+cindex:time-date range
#+cindex:range, time-date
- Time/Date range :: Two timestamps connected by =--= denote a range.  The headline is shown on the
     first and last day of the range, and on any dates that are displayed and fall in the range.

- Inactive timestamp :: written with square brackets instead of angular ones.  They do /not/
     trigger an entry to show up in the agenda.

**** Create Timestamps
All commands listed below produce timestamps in the correct format.

#+findex:@command{org-time-stamp}
#+cindex:insert timestamp
- ~(org-time-stamp)~ =C-c .= :: Prompt for a date and insert a corresponding timestamp.  When point
     is at an existing timestamp in the buffer, the command is used to modify this timestamp
     instead of inserting a new one.  When this command is used twice in succession, a time range
     is inserted.

#+findex:@command{org-time-stamp-inactive}
#+cindex:inactive timestamp
- ~(org-time-stamp-inactive)~ =C-c != :: insert an inactive timestamp that does not cause an agenda
     entry.

#+cindex:normalize timestamp
- normalize time stamp =C-c C-c= :: Normalize timestamp, insert or fix day name if missing or
     wrong.

#+findex:@command{org-date-from-calendar}
- ~(org-date-from-calendar)~ =C-c <= :: Insert a timestamp corresponding to point date in the
     calendar.

#+findex:@command{org-goto-calendar}
- ~(org-goto-calendar)~ =C-c >= :: Access the Emacs calendar for the current date. If there is a
     timestamp in the current line, go to the corresponding date instead.

#+findex:@command{org-open-at-point}
#+cindex:agenda
- ~(org-open-at-point)~ =C-c C-o= :: Access the agenda for the date given by the timestamp or
     -range at point

#+findex:@command{org-timestamp-down-day}
#+findex:@command{org-timestamp-up-day}
#+cindex:date, change
- ~(org-timestamp-down-[u]-day)~ =S-LEFT S-RIGHT= :: Change date at point by one day.

#+findex:@command{org-evaluate-time-range}
#+cindex:time range, evaluate
- ~(org-evaluate-time-range)~ =[PRE] C-c C-y= :: Evaluate a time range by computing the difference
     between start and end.  With a prefix argument, insert result after the time range (in a
     table: into the following column).

**** Entering Timestamps
#+cindex:timestamp prompt
#+cindex:default date/time format
When Org mode prompts for a date/time, the default is shown in default date/time format.  It in
fact accepts date/time information in a variety of formats.  Org mode finds whatever information is
in there and derives anything you have not specified from the default date and time.  The default
is usually the current date and time, but when modifying an existing timestamp, or when entering
the second stamp of a range, it is taken from the stamp in the buffer.  Org mode assumes that most
of the time you want to enter a date in the future.

#+cindex:relative date
You can specify a relative date by giving, as the first thing in the input: a plus/minus sign, a
number and a letter—‘d’, ‘w’, ‘m’ or ‘y’

* Editing

* Navigating

* Todos

  TODO items are an integral part of the notes file, and intended to be integrated directly while
  taking notes.  Simply mark an entry as being a TODO item, and the entire context from which the
  TODO item emerged is always present.  While your notes become scattered throughout your files,
  Org-mode provides methods to give you an overview of all the things that you have to do.

  - A heading becomes a TODO item when it starts with =TODO=

  - =C-c C-t= ~(org-todo)~: Rotate the TODO state; if fast selection is on (it is), prompt for a
    keyword, but only after fast access keys have been assigned (not done by default).

  - ~S-M-<RET>~: Insert a new TODO entry below

  - ~S-<RIGHT> S-<LEFT>~ : Cycle through multiple keywords

  - =C-c / t= ~(org-show-todo-tree)~: View TODO items in a sparse tree.

  - =C-c / T=: Search for a specific TODO, or a list =KWD1|KWD2=

  - =C-u C-u C-c / t=: Find all TODO states, both done and not done.

  - ~M-x org-agenda t~ ~(org-todo-list)~: Show the global TODO list.

** =TODO= Variables

   - ~org-todo-keywords~ ::
        List of TODO entry keyword sequences and their interpretation.

        Original value is: ~((sequence "TODO" "DONE"))~

   - ~org-use-fast-todo-selection~ ::
        Only works when access keys have actually been assigned by the user.

        Non-nil means use the fast todo selection scheme with ‘C-c C-t’.  When nil, fast selection
        is never used.

        When =prefix=, use fast selection scheme when called with a prefix arg, =C-u C-c C-t=

        When =t=, when calling with a prefix, force cycling of TODO state.

   - ~org-todo-state-tags-triggers~ ::
        Tag changes that should be triggered by TODO state changes.  A list.

* Agenda

** Agenda Dispatcher

- org-agenda :: =C-c a= (org-agenda &optional ARG ORG-KEYS RESTRICTION)

                Dispatch agenda commands to collect entries to the agenda buffer.

** Global TODO List

   The global TODO list contains all unfinished TODO items formatted and collected into a single
   place.

   - =M-x org-agenda t= ~(org-todo-list)~: ::
     ~(org-agenda)~ starts the agenda dispatcher.  Dispatch agenda commands to collect entries to
        the agenda buffer.

     =t= means to show the global TODO list.  This collects the TODO items from all agenda files (see Agenda
        Views::) into a single buffer.

     =T= or =C-u= allows you to select a specific TODO keyword or several using =|=

* Capture

https://orgmode.org/manual/Capture-and-Attachments.html#Capture-and-Attachmenst

Quickly capture new ideas and tasks, and to associate reference material with them.

Quickly store notes in the flow.  Based upon John Wiegley's =Remember= package.

#+cindex:capture
Process called /capture/

#+cindex:attchments
Store files related to a task, /attachments/, in a special directory

Parse RSS feeds for information

#+cindex:protocols
Let external programs (e.g., a web browser), trigger Org to capture material
- see [[https://orgmode.org/manual/Protocols.html#Protocols][Protocols]]

** Using org-mode as a Day Planner                              :start:here:
:PROPERTIES:
:author:   "John Wiegley"
:uri:      http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/
:date:     2007-08-20
:END:

The following document describes how to use Carsten Dominik’s excellent ~org-mode~ Emacs package
after the fashion of a pen-and-paper day planner.

I discovered that only digital media can truly keep up with my ever-changing world.

Enter ~org-mode~.  This handy system uses a fairly simple, single-file outlining paradigm, upon
which it overlays concepts like due dates and priorities.  I find its method both non-intrusive and
easy to edit by hand, which are absolute necessities for me.

I will present my usage of ~org-mode~ as a day planner first by giving some templates you can use
straight away, and then by explaining my methodology via example uses of ~org-mode~ that employ
this configuration.

*** Sample Configuration for J Wiegley's org-mode


** Setup Capture

Quickly store notes with little interruption of your work flow.

   - Set a default target file for notes
     : (setq org-default-notes-file (concat org-directory "/notes.org"))

   - Define a global key for capturing new material.  See Org Activation
     : (global-set-key (kbd "C-c c") 'org-capture)

** Using

   - ORG-CAPTURE :: Display the capture templates menu
     : ~C-c c: (org-capture)~

     If you have templates defined, it offers these templates for selection; otherwise, use a new
     Org outline node as the default template.  It inserts the template into the target file and
     switches to an indirect buffer narrowed to this new node.  You may then insert the information
     you want.

     You can also call =capture= from the *agenda*
     : k c

     Any timestamps inserted by the selected capture template defaults to the date at point in the
                    agenda

   - ORG-CAPTURE-FINALIZE :: Resume your work
     : ~[C-u] C-c C-c: (org-capture-finalize)~

     - Return to the window configuration before the capture process and resume your work.

     - When called with a prefix argument, finalize and then jump to the captured item.

   - ORG-CAPTURE-REFILE :: Refile the note to an appropriate place
     : ~C-c C-w: (org-capture-refile)~

     This is a normal refiling command that will be executed; =point='s position is important.
     Make sure =point= is on the appropriate parent node.  See [[info:org#Refile%20and%20Copy][Refile and Copy]].

     Any prefix argument given to this command is passed on to the ~org-refile~ command.

   - ORG-CAPTURE-KILL :: Abort
     : ~C-c C-k: (org-capture-kill)~

     Abort the capture procedure and return to the previous state.

** Capture Templates

   You can use templates for different types of capture items, and for different target locations.
   Create templates using the =customize= interface.  Customize the variable
   ~org-capture-templates~.

*** Elements

    Each entry in org-capture-templates is a list with the following items:

    - keys ::
        the key(s) that select the template, as string characters (``a'' to use a single key)
      (``bt'' to use two keys).

      When using several keys, keys using the same prefix key must be sequential in the list and
      preceded by a 2-element entry explaining the prefix key:
      : ("b" "Templates for marking stuff to buy")
      If you do not define a template for the C key, this key opens the Customize buffer for this
      complex variable.

    - description ::
                     A short string describing the template

    - type ::
              The type of entry, a symbol.

      - ~entry~

        An Org mode node, with a headline. Will be filed as the child of the target entry or as a
        top-level entry. The target file should be an Org file.

      - ~item~

        A plain list item, placed in the first plain list at the target location. Again the target
        file should be an Org file.

      - ~checkitem~

        A checkbox item. This only differs from the plain list item by the default template.

      - ~table-line~

        A new line in the first table at the target location. Where exactly the line will be
        inserted depends on the properties ~:prepend~ and ~:table-line-pos~

      - ~plain~

        Text to be inserted as it is.

    - target ::

      Specification of where the captured item should be placed.

      - targets usually define a node and entries will become children of this node.

      - other types will be added to the table or list in the body of this node.

      - most target specifications contain a file name.  If that file name is the empty string, it
        defaults to ~org-default-notes-file~.

      - a file can also be given as a variable or as a function called with no argument.

      - when an absolute path is not specified for a target, it is taken as relative to
        ~org-directory~.

      Valid values are:

      - ~(file "path/to/file")~ ::
           Text will be placed at the beginning or end of that file.

      - ~(id "id of existing org entry")~ ::
           Filing as child of this entry, or in the body of the entry.

      - ~(file+headline "filename" "node headline")~ ::
           Fast configuration if the target heading is unique in the file.

      - ~(file+olp "filename" "Level 1 heading" "Level 2" ...)~ ::
           For non-unique headings, the full path is safer.

      - ~(file+regexp "filename" "regexp to find location")~ ::
           Use a regular expression to position point.

      - ~(file+olp+datetree "filename" [ "Level 1 heading" ...])~ ::
           This target creates a heading in a date tree for today’s date.  If the optional outline
           path is given, the tree will be built under the node it is pointing to, instead of at
           top level.

      - ~(file+function "filename" function-finding-location)~ ::
           A function to find the right location in the file.

      - ~(clock)~ ::
                     File to the entry that is currently being clocked.

      - ~(function function-finding-location)~ ::
           Most general way: write your own function which both visits the file and moves point to
           the right location.

    - template ::

    - properties ::

*** Explansion

*** In Context

** Org Capture Customization
*** Org Capture Group

    Options concerning capturing new entries.

    - Org Directory
    - Org Default Notes File
    - Org Reverse Note Order
    - Org Datetree Add Timestamp

    - Org Capture Bookmark
    - Org Capture Templates
    - Org Capture Templates Contexts
    - Org Capture Use Agenda Date
    - Org Capture Prepare Finalize Hook
    - Org Capture Before Finalize Hook
    - Org Capture After Finalize Hook

*** Org Refile Group

    - Org Refile Targets
    - Org Log Refile
    - Org Outline Path Complete In Steps
    - Org Refile Active Region Within Subtree
    - Org Refile Allow Creating Parent Nodes
    - Org Refile Target Verify Function
    - Org Refile Use Cache
    - Org Refile Use Outline Path

* Examples

** Examples and Cookbook

- [[http://ehneilsen.net/notebook/orgExamples/org-examples.html][Emacs org-mode examples and cookbook]]

* Issues

** ~jit-lock~ Interfering with ~org-goto~

   #+CINDEX:jit-lock
   - ``Not enabling jit-lock: it does not work in indirect buffer.''

     Received when running the command ~org-goto~ (i.e., =C-c C-j=)

     [[https://emacs.stackexchange.com/questions/36374/jit-lock-message-it-does-not-work-in-indirect-buffer-does-not-allow-me-to-use][jit-lock message...]]

     #+BEGIN_QUOTE
     If someone came to the same issue (or related), know that I solved it by not loading twice org
     from different packages (Elpa and Melpa) in Emacs.
     -- [[https://emacs.stackexchange.com/users/15574/rafael-nagel][Rafael Nagel]]
     #+END_QUOTE

     - ~jit-lock.el~ :: Just-in-time fontification, triggered by C redisplay code.

       - ~(defun jit-lock-mode (arg) ...)~ :: ``Toggle Just-in-time Lock mode''

            When in an indirect buffer, ~jit-lock-mode~ won't work, and this message appears.  That
            begs the question why it appears during a call to ~org-goto~.

     - Resolution ::
                     My setup included an ~org~ directory inside of MacPorts EmacsMac
                     ~Contents/Resources/lisp/~, as well as an ~org-9.2.2~ inside of my
                     ~/.emacs.d/~ which I installed yesterday.  Upon removing the ~org~ directory
                     and restarting, the error message no longer appeared and ~org-goto~ worked.
                     No idea why problem occurred other than my system is loading too many packages
                     because of the duplication.  <<mult-load-dirs>>This issue should probably be
                     investigated.

     - Note :: *Important* you need to do this [install new Org-mode] in a session where no =.org=
               file has been visited, i.e., where no Org built-in function have been
               loaded. Otherwise autoload Org functions will mess up the
               installation.[fn::https://orgmode.org/manual/Installation.html]] I probably
               installed a new Org-mode after first visiting an org-file and ``messed things up.''

*** TODO Do Multiple Load Directories Interfere With Each Other

    See [[mult-load-dirs][mult-load-dirs]]

** Wholesale changes to LaTeX headers
:PROPERTIES:
:source:   "Emacs-orgmode Digest, Vol 167, Issue 1"
:date:     2020-01-01T09:01
:END:

*** Query
:PROPERTIES:
:from:     "Norman Walsh <ndw@nwalsh.com> "
:date:     "Dec 31, 2019, at 7:42 AM"
:END:

On Dec 31, 2019, at 7:42 AM, Norman Walsh <ndw@nwalsh.com> wrote:

Hi,

I want to make wholesale changes to the LaTeX preamble exported from Org mode.  I want to put
=\RequirePackage= and =\PassOptionsToPackage= calls before the =\documentclass=, I want to write a
specific set of macros after the =\documentclass=, I want to craft a couple of =\renewcommands=,
etc.

Where should I begin?

*** Answer 1
:PROPERTIES:
:from:     "Berry, Charles <ccberry@health.ucsd.edu>"
:date:     "Tue, 31 Dec 2019 18:55:36 +0000"
:END:

Execute this src block:

#+begin_src emacs-lisp :results none
(info "(org) LaTeX header and sectioning")
(describe-variable 'org-latex-classes)
#+end_src

Browse the =*info*= buffer and study the =*Help*= buffer.

Then type

~`M-x customize-variable RET org-latex-classes RET`~

and add your custom class or modify an existing class to your liking.

HTH,

Chuck

*** Answer 2
:PROPERTIES:
:from:     "Tim Cross <theophilusx@gmail.com>"
:date:     "Wed, 01 Jan 2020 06:18:22 +1100"
:END:

If you want these changes globally, I would start with the ~org-latex-classes~ variable.  There is
a lot you can do by tweaking the values in this variable.  I found the documentation to be good,
but dense (i.e. a lot to it, needing a git to digest fully).  The docs for that variable will also
point you to other variables you can tweak to do what you want.

If you just want to tweak for specific files, =#+LATEX_HEADER= and =#+LATEX_HEADER_EXTRA= might be
sufficient.  I find these a good place to experiment with different settings.  If they prove more
widely useful, I will transfer/translate them into the other ~org-latex~ variables.

Finally, doing an =M-x apropos= for ~org-latex-.*~ will likely bring up some additional variables
which my be of interest/use.

Tim

* Org Export to HTML
** Org HTML-CSS Themes
*** fniessen-org-html-themes
How to export Org mode files into awesome HTML in 2 minutes

- https://github.com/fniessen/org-html-themes

**** Overview
Though you can easily override CSS stylesheets and add  your own HTML themes, we can say (or write)
that Org mode provides a basic HTML support.

Org-HMTL  themes  is  an open  source  framework  for  providing  you  with  a list  of  very  nice
(cross-browser) themes for all your Org documents. Use them to style your docs, and your colleagues
will come up to tell you that you are a genius!

**** Gallery
This is a list of available HTML themes for Org  mode, which you can use right now! Well, I hope to
have more than one in a couple of weeks…

***** Bigblow
Bigblow is perfect for your work: it is a clean design aimed at optimal Org mode experience in your
browser. It looks just awesome!

***** ReadTheOrg
ReadTheOrg is  a clone  of the  official –  and great! –  [[https://github.com/snide/sphinx_rtd_theme][Sphinx theme]]  used in  the [[http://docs.readthedocs.org/en/latest/][Read  The Docs]]
site. It gives a beautiful and professional style to all your Org docs.

**** Demo
I’ve written a [[https://github.com/fniessen/org-html-themes/blob/master/tests/org-mode-syntax-example.org][demo page]] for the themes that provides a maximal working support of Org mode syntax.

Please see the [[https://github.com/fniessen/refcard-org-mode][Org  mode refcard]] page for full examples of  headings, code, admonitions, footnotes,
tables and other details.

**** Using a Theme
Using a theme from the theme gallery for your own Org documents is very easy:

1. You add  a =#+SETUPFILE: directive= in the  preamble of your document (to  include the necessary
   CSS and JavaScript files).

   You can either use an URL of the following type for the “setup file” of your chosen theme:

   : #+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-NAME.setup

   (where NAME is either ~bigblow~ or ~readtheorg~)

   or,  if you  cloned or  downloaded the  Org-HTML themes  project –  to get  no dependency  on an
   Internet connection –, use a (relative or absolute)  path to the local “setup file” and copy the
   ~src~ folder from the cloned folder into the same folder as the file you want to export:

   : #+SETUPFILE: PATH/TO/GIT/REPO/org/theme-NAME-local.setup

2. Then, you export your Org mode file to HTML with ~org-html-export-to-html~ or with =C-c C-e h h=.

**** Customizing a Theme
You love those themes, but you still would  like to override particular HTML tags? Some examples do
follow…

Before doing that, though, if you think it really is an improvement that could server other persons
as well, including me, you’re invited to submit your change…

***** Change the background code blocks
Here’s an example to insert into your Org documents:

#+begin_src org
  # Change the background of source block.
  ,#+HTML_HEAD: <style>pre.src{background:#343131;color:white;} </style>
#+end_src

***** Unset body width limit of ReadTheOrg
Solution provided by Malcolm Cook:

#+begin_src org
  ,#+HTML_HEAD: <style> #content{max-width:1800px;}</style>
  ,#+HTML_HEAD: <style> p{max-width:800px;}</style>
  ,#+HTML_HEAD: <style> li{max-width:800px;}</style
#+end_src

* Org-Mode as a Day Planner
- http://www.newartisans.com/2007/08/using-org-mode-as-a-day-planner/


The following document describes how to use Carsten Dominik’s excellent org-mode Emacs package
after the fashion of a pen-and-paper day planner.  This handy system uses a fairly simple,
single-file outlining paradigm, upon which it overlays concepts like due dates and priorities. I
find its method both non-intrusive and easy to edit by hand.

** Setting Up Emacs
*** List of =TODO= states:
- CANCELLED “x”
- DONE “d”
- DEFERRED “f”
- DELEGATED “l”
- STARTED “s”
- WAITING “w”

* Blogging with Org

  - [[https://explog.in/][expLog]] & https://explog.in/config.html

  - [[https://cestlaz.github.io/posts/using-emacs-35-blogging/][Using Emacs 35 - Blogging]]

  - [[https://www.reddit.com/r/emacs/comments/857ab1/blogging_with_emacs/][Hugo also has good direct support for org-mode]]

    #+BEGIN_QUOTE
    Anyhow, if it's any comfort, hugo is a really fast static site generator that live updates the
    browser as soon as I C-x C-s my Org file (which auto-triggers the export to .md via ox-hugo)
    #+END_QUOTE

    - [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]]

      I develop an Org exporter called =ox-hugo= which is basically a Markdown (with bits and
      pieces of HTML where Markdown falls short) exporter + TOML/YAML front-matter generator for
      Hugo static sites.  In the process of supporting basically the whole of the Org syntax that I
      know of, and making any Org document exportable almost in par with ox-html, I ended up with
      this [[https://github.com/kaushalmodi/ox-hugo/blob/master/test/site/content-org/all-posts.org][humongous test file]]. It covers probably every niche of Org syntax that I or folks who
      filed issues on the repo could think of (a recent one being.. variations in Org syntax for
      inline vs standalone images, hyperlinked vs not, with/without HTML target attribute being set
      via =#+ATTR_HTML=, with/without captions). I am mentioning that file with hopes that orga is
      able to support all kinds of Org syntax in that. Many tests in there are for testing the Hugo
      front-matter export, but majority of that test file should work for your project too.  In
      addition, how does orga support subtree properties, tags, etc which is critical for folks
      using a single Org file (like that test file) to store all their Org documents organized as
      subtrees (instead of having a physical Org file for each document)?  Once again, great to see
      more Org mode out in the wild :)

    - [[http://www.modernemacs.com/post/org-mode-blogging/][An Emacs Blogging Workflow]]

      Hugo is a static site generator. It natively supports org-mode, builds fast, and has live
      reloading.

  - [[http://donw.io/post/github-comments/][Using Github for Comments]]

  - [[https://github.com/bastibe/org-static-blog][ORG-STATIC-BLOG]]

  - [[https://github.com/novoid/lazyblorg][lazyblorg – blogging with Org-mode for very lazy people]]

  - [[https://xiaoxinghu.github.io/orgajs/][ORGA]]

    - [[https://github.com/xiaoxinghu/orgajs][orgajs on Github]]

    - [[https://github.com/xiaoxinghu/gatsby-orga][gatsby orga starter project]]

      - [[https://www.reddit.com/r/orgmode/comments/7wjmwr/orga_the_ultimate_orgmode_parser_in_javascript/][Orga the Ultimate org-mode parser in JavaScript]]

    - [[http://endlessparentheses.com/how-i-blog-one-year-of-posts-in-a-single-org-file.html][How I blog: One year of posts in a single org file]]

      *When this blog was conceived, I decided that I wanted it to be entirely contained in a
      single org file*, and that this would also be my Emacs init file.... Before anything else, it
      should go without saying that the content of the posts is written in org-mode. The engine I
      use for exporting is a large wrapper around ox-jekyll, and the posts are all pushed to Github
      and rendered by their built-in Jekyll support.

      - <<single-file>>Why keep a blog in [[single-file-fail][a single file]]?

      First of all because org, once you learn its knobs and bobs, is just plain powerful.... This
      is a small difference, but it applies all around. If I want to link to a previous post, I
      find it with C-c C-j and then move back with C-u C-SPC, all without leaving the buffer. When
      I look at the posts list, the tags are listed right beside the title, I don’t have to open a
      file to see them.... You see, if posts were separate files I would have to copy the snippets
      to a separate org file, and then write about them there, and then export them to Jekyll. In
      this scenario, I just know I would eventually change some snippet (a healthy init file is a
      fluid creature) and forget to update the corresponding org file, and the thought of leaving
      out-dated code lying around sent a chill through my spine. Not to mention, this whole flow of
      “init file → org post → jekyll post” has one layer too many for my taste, and redundancy is
      an evil I slay with a chainsaw.

    - [[https://github.com/yoshinari-nomura/org-octopress][Org-octopress – org-mode in octopress.]]

      Org-octopress is a package to help users those who want to write blog articles in org-style
      using Octopress (or Jekyll).

    - [[https://www.sadiqpk.org/blog/2018/08/08/blogging-with-org-mode.html][Blogging with Emacs org-mode]]

      <<single-file-fail>>All pages of this website has been designed in org-mode. Not just this
      blog. The [[https://gitlab.com/sadiq/sadiq.gitlab.io][repository]] contain source code for the complete website.... For about a year, I
      have been trying to find a suitable workflow to blog using Emacs org-mode. *My idea was to
      put all articles (posts) in [[single-file][a single org file]], which failed misserably* for the following
      reasons:

      - The default org-mode html export is designed to work on seperate files. So single file org
        export requires custom code which I don't want to write.

      - I wish to link to the source org file from each html article, which is not possible if
        every article is written in a single file.

      - Last year, I did write around 500 lines of code, which worked. Pretty much all of them were
        unmaintainable hacks. A few days back, I gave it a try again. This time, with a different
        design:

      - Each article is written in seperate org files, with dated directory names. Eg.: A
        hello-world.org file in 2018/08/08 dir for Hello World article.

      - Manually created blog index and atom feeds so that I don't have to wait another year to
        pass the salt.

    - [[https://orgmode.org/worg/org-blog-wiki.html][Blogs and Wikis with Org]]

    - [[https://orgmode.org/worg/org-web.html][Web Pages Made with Org-Mode]]

    - [[https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][Publishing Org-mode files to HTML]]

    - [[https://justin.abrah.ms/emacs/orgmode_static_site_generator.html][Writing a static site generator using org-mode.]]

      This site is now generated through org-mode, an emacs library which is used for
      outlining. The generation of the HTML lies in the export functionality of outlines. The
      benefits of this system is that its easy, uses a tool that I'm already familiar with, and
      extensible.

      The heart of my blog lies in org-modes export format. You can find the documentation for it here. This post, currently looks something like the picture above. Standard org-mode stuff.

      The exporting stuff lives in a small amount of elisp (which is in a non-exported node of my
      ~index.org~ (which turns into ~index.html~)). When I export my org project, it publishes via
      tramp to my server's web root.

    - [[https://justin.abrah.ms/emacs/literate_programming.html][Literate programming with org-babel]]

    - [[https://pavpanchekha.com/blog/org-mode-publish.html][Using Org-mode to Publish a Web Site]]

      This blog is written with Org-mode from Emacs, and deployed using a git hook.

    - [[http://danamlund.dk/emacs/orgsite.html][Example of making and managing a website with emacs org-mode]]

    - [[https://trashbird1240.wordpress.com/2012/01/17/set-up-a-website-using-emacs-org-mode/][Set up a website using Emacs’ Org Mode]]

    - [[https://jgkamat.gitlab.io/blog/website1.html][Creating A Blog in Org Mode]]

      Org is a very powerful tool, but most of the org setups I've seen hasn't used it to its full
      potential. This website is one example of a complex, multi-page project built in org. This
      post is a 'brief' overview of how it was created.

    - [[https://ogbe.net/blog/blogging_with_org.html][Blogging using org-mode (and nothing else)]]

      Obviously, the Org publishing feature was all that I needed. I whipped up a nice little
      configuration that produces this website from a set of Org source files, some custom CSS and
      HTML, and some custom Elisp.

    - [[https://bastibe.de/2013-11-13-blogging-with-emacs.html][Blogging with Emacs]]

    - [[https://thibaultmarin.github.io/blog/posts/2016-11-13-Personal_website_in_org.html][Personal website in org]] <<

      This post describes the configuration for this website, which is statically generated using
      emacs and org-mode. Org-mode's publishing functionality is used to generate the HTML content
      from source org files.

    - [[http://www.bobnewell.net/publish/35years/orgpublish.html][Publishing with Org-Publish]]

    - [[https://www.baty.net/2015/publishing-my-notes-using-org-mode/][Publishing My Notes Using Org Mode]]

* Reproducible Research
- https://github.com/bzg/org-mode-rr

* Variables

- ~org-agenda-dim-blocked-tasks~ ::

     Non-=nil= means dim blocked tasks in the agenda display.  Default is non-=nil=.  While this
     causes some overhead during agenda construction, it can be used to advantage.
     [[help:org-agenda-dim-blocked-tasks]]

- ~org-agenda-inhibit-startup~ ::

     Default value is =nil=.

     When =t=, inhibit startup when preparing agenda buffers (visibility state is not set).  Also
     ignore =#+STARTUP:= setting when =t=.  The point of this variable is to speed up agenda
     commands when Org files grow in size and number.

- ~org-agenda-show-inherited-tags~ ::

     Non-nil means show inherited tags in each agenda line.  Default value is =t=.  May be set to a
     list of agenda types (same as ~org-agenda-use-tag-inheritance~).  When =nil=, never show
     inherited tags in agenda lines.

     When this option is set to ‘always’, it takes precedence over ‘org-agenda-use-tag-inheritance’
     and inherited tags are shown in every agenda.

- ~org-agenda-use-tag-inheritance~ ::

     Allowed values are one or more of:

  + =todo=
  + =search=
  + =agenda=

  Setting this option to =nil= will speed up non-tags agenda views /a lot/.

  List of agenda view types where to use tag inheritance.  The default value sets tags in every
     agenda type, i.e., =(todo search agenda)=.  You may want the agenda to be aware of the
     inherited tags anyway, e.g. for later tag filtering.

  This variable has no effect if ‘org-agenda-show-inherited-tags’ is set to ‘always’.  In that
     case, the agenda is aware of those tags.

- =org-babel-default-header-args= ::

    Default arguments to use when evaluating a source block.  [[obdha][Babel default]].  It's default value is:

    #+begin_src emacs-lisp
    ((:session . "none")
     (:results . "replace")
     (:exports . "code")
     (:cache . "no")
     (:noweb . "no")
     (:hlines . "no")
     (:tangle . "no"))
    #+end_src

- =org-babel-no-eval-on-ctrl-c-ctrl-c= ::

     Remove code block evaluation from the ‘C-c C-c’ key binding.

- ~org-babel-python-command~ :: Name of the command for executing Python code (i.e., ~python3~)

- ~org-catch-invisible-edits~ ::

  + =nil=: do not check; just do invisible edits.  DEFAULT
  + =error=: throw an error and do not edit
  + =show=: make point visible, and do the requested edit
  + =show-and-error=: make point visible, then throw an error and abort.
  + =smart=: make point visible; do edit in some cases; basically, this allows insertion and
    backward-delete right before ellipses.

     Check if in invisible region before inserting or deleting a character.

- =org-confirm-babel-evaluate= ::

     Confirm before evaluation.  Require confirmation before interactively evaluating code blocks
     in Org buffers.  The default value of this variable is =t=.

- =org-confirm-elisp-link-function= ::

     Non-=nil= means ask for confirmation before executing Emacs Lisp links.

- =org-confirm-shell-link-function= ::

     Non-=nil= means ask for confirmation before executing shell links.

- ~org-cycle-emulate-tab~ ::

     Default value is =t=.

     Where should ~org-cycle~ emulate ~<TAB>~.
  + =nil=
  + =white= complete white lines
  + =whitestart= beginning of white lines before first char
  + =t= everywhere except headline
  + =exc-hl-bol= everywhere except start of headline
- ~org-cycle-global-at-bob~ ::

     When non-=nil=, ~<TAB>~ at very beginning of file (not on a headline), runs global cycling.

     *NOTE:* This works even if the first line holds a mode line.

- ~org-insert-mode-line-in-empty-file~ ::

     When non-=nil= and ~org-mode~ is called interactively on an empty file, insert =-*- mode: org
     -*-= into the first line.

- ~org-global-properties~ ::

     List of property/value pairs that can be inherited by any entry.  This list will be combined
     with the constant ~org-global-properties-fixed~.

- ~org-global-properties-fixed~ ::

     List of property/value pairs that can be inherited by any entry.  These are fixed values, for
     the preset properties.  Use ~org-global-properties~ to add to this list.

     Its value is:
     : (("VISIBILITY_ALL" . "folded children content all")
     :  ("CLOCK_MODELINE_TOTAL_ALL" . "current today repeat all auto"))

- ~org-modules~ ::

     Modules that should always be loaded together with ~org.el~.

- ~org-startup-folded~ ::

     Non-=nil= means entering Org mode will switch to OVERVIEW.

- ~org-structure-template-alist~ ::

     An alist of keys and structure block types used by ‘org-insert-structure-template’ and Org
     Tempo.

- ~org-tags-exclude-from-inheritance~ ::

     List of tags that should never be inherited.  Default value is =nil=.  Opposite is
     ~org-use-tag-inheritance~.

- ~org-tags-match-list-sublevels~ ::

     Non-=nil= means list also sublevels of headlines matching a search.  Default value is =t=.

     When set to the symbol ‘indented’, sublevels are indented with leading dots.

     Setting this variable to =nil= causes subtrees of a match to be skipped.

     Applies to tags and property searches, and to stuck projects.

     *NOTE:* This variable is semi-obsolete and probably should always be true.  It is better to
     limit inheritance to certain tags using the variables ‘org-use-tag-inheritance’ and
     ‘org-tags-exclude-from-inheritance’.

- ~org-tempo-keywords-alist~ ::

     This is an alist of KEY characters and corresponding KEYWORDS, just like
     ‘org-structure-template-alist’.  The tempo snippet =<KEY= is expanded.

- ~org-use-property-inheritance~ ::

     Non-=nil= means properties apply also for sublevels.  It is not on by default to prevent slow
     searches.  When =nil=, only the properties directly given in the current entry count.

     The value may also be a list of properties that should have inheritance, or a regular
     expression matching properties that should be inherited.

     Some special properties use inheritance under special circumstances: CATEGORY, ARCHIVE,
     COLUMNS, and the properties ending in "_ALL" when they are used as descriptor for valid values
     of a property.

- ~org-use-tag-inheritance~ ::

     Non-=nil= means tags in levels apply also for sublevels.  Default value is =t=.  If this
     option is =t=, a match early-on in a tree can lead to a large number of matches in the subtree
     when constructing the agenda or creating a sparse tree.  If you only want to see the first
     match in a tree, see ~orgs-tags-match-list-sublevels~.

     When =nil=, only the tags directly given in a specific line apply there.

     May be a list of tags to be inherited, or a regexp to match tags.

* org-element.el
~org-element.el~ implements a parser according to Org's syntax specification.

** Parsing Functions

*** Global Parsing

- ~org-element-parse-buffer~ ::

- ~org-element-interpret-data~ ::

*** Local Parsing

- ~org-element-at-point~ ::

- ~org-element-context~ :: 

** Accessor Functions

*** Getting Functions

- ~org-element-type~ ::

- ~org-element-property~ ::

- ~org-element-contents~ ::

*** Setter Functions

- ~org-element-put-property~ ::

- ~org-element-set-element~ ::

- ~org-element-insert-before~ ::

- ~org-element-adopt-element~ ::

- ~org-element-extract-element~ :: 

** Utility Functions

- ~org-element-map~ ::

- ~org-element-copy~ ::

- ~org-element-lineage~ ::

** Types and Attributes

*** Common Properties

- =:begin= ::

- =:end= ::

- =:post-blank= ::

- =:post-affiliated= ::

- =:parent= :: 

*** Contained Properties

- =:contents-begin= ::

- =contents-end= ::

*** Affiliated Keywords

- =:caption= ::

- =:header= ::

- =:name= ::

- =:plot= ::

- =:results= ::

- =:attr_NAME= :: 

*** Specific Properties

* Org Elements

** Context-Free Elements

*** Headlines

: STARS KEYWORD PRIORITY TITLE TAGS
: **** TODO [#A] COMMENT Title :tag:a2%:

#+vindex:org-todo-keywords-1
#+vindex:org-footnote-section
#+cindex:archive
- STARS :: required; a string starting at column 0, containing at least one asterisk and ended by a
  space character; the number of asterisks is used to define the level of the headline.

- KEYWORD :: a TODO keyword, which has to belong to the list defined in ~org-todo-keywords-1~

- PRIORITY :: a priority cookie, i.e. a single letter preceded by a hash sign # and enclosed within
  square brackets.

- TITLE :: can consist of any character except a new line; whatever is left after every other part
  has been matched.

  - COMMENTED :: If the first word appearing in the title is “COMMENT”, the headline will be
    considered as “commented”.  Case is significant.

  - FOOTNOTE :: If its title is ~org-footnote-section~, it will be considered as a “footnote
    section”.  Case is significant.

  - ARCHIVED :: If “ARCHIVE” is one of its tags, it will be considered as “archived”. Case is
    significant.

- TAGS :: made of words containing any alpha-numeric character, underscore, at sign, hash sign or
  percent sign, and separated with colons.

*** Sections
A headline and only a headline may contain, optionally, one *section*, plus optionally deeper
levels of headlines.  However, all text before the first headline is in a section of its own.

A section contains directly any:
- greater element, or
- element.

*** Plamnning Lines
Planning lines follow directly after a headline elements.  No blank lines allowed.  They are filled
with =INFO= parts, following the pattern:

: KEYWORD: TIMESTAMP

- KEYWORD :: either
  - DEADLINE
  - SCHEDULED
  - CLOSED
- TIMESTAP :: a timestamp object

*** Property Drawers
Property drawers are a special type of drawer containing properties attached to a headline.
Property Drawers follow directly after a headline, or a headline and its planning information.

: HEADLINE
: PROPERTYDRAWER

: HEADLINE
: PLANNINGLINE
: PROPERTYDRAWER

A property drawer follows the pattern:
: :PROPERTIES:
: CONTENTS
: :END:

where =CONTENTS= consists of zero or more node properties.

** Paragraphs
Unit of measurement.  Default element.  Any unrecognized context is a paragraph.  Empty lines and
elements end paragraphs.  Paragraphs can contain every type of object.

** Empty Lines
Empty lines belong to the largest element ending before them.

** Keywords or Attributes
Most element types can be assigned attributes.  This is done by adding specific keywords, named
“affiliated keywords”, just above the element considered, with no blank line allowed.  Affiliated
keywords are built upon one of the following patterns:

: #+KEY: VALUE
: #+KEY[OPTIONAL]: VALUE
: #+ATTR_BACKEND: VALUE

- KEY :: is one of:
  - CAPTION[OPTIONAL] (may have more than one)
  - HEADER (may have more than one)
  - NAME
  - PLOT
  - RESULTS[OPTIONAL]

- BACKEND :: a string constituted of alpha-numeric characters, hyphens or underscores. May have
  more than one.

- OPTIONAL :: can contain any character but a new line; the following keys are the only ones that
  can contain an OPTIONAL element:
  - CAPTION
  - RESULTS

- VALUE :: can contain any character but a new line

- The following types cannot be assigned attributes ::
  - comment
  - clocks
  - headlines
  - inlinetasks
  - items
  - node properties
  - planning
  - property drawers
  - sections
  - table rows

** Categories or Environments

*** Objects
An /object/ is a part that could be included in an element.  Most objects cannot contain objects.
Objects can only be found in the following locations:

- affiliated keywords ~org-element-parsed-keywords~
- document properties
- headline titles
- inlinetask titles
- item tags
- paragraphs
- table cells
- table rows
- verse blocks


#+attr_texinfo: :options org-element-all-objects
#+begin_defvar
~org-element-all-objects~ is a variable defined in ‘org-element.el’.  It contains a complete list
of object types.

Its value is:

#+begin_example
bold code entity export-snippet footnote-reference inline-babel-call inline-src-block
italic line-break latex-fragment link macro radio-target statistics-cookie
strike-through subscript superscript table-cell target timestamp underline verbatim
#+end_example
#+end_defvar

*** Elements
An element defines syntactical parts that are at the same level as a paragraph.  They cannot either
contain by or be contained by a paragraph.

*** Greater Elements
Greater elements are all parts that can contain an element.


#+cindex:syntax
#+cindex:context-free
#+texinfo:@heading Context-free Syntactical Parts

The following four syntactical parts are /context-free/:

- [[*Headlines][headlines]]
- [[*Sections][sections]]
- [[*Planning Lines][planning lines]]
- [[*Property Drawers][property drawers]]

* Org Element and Org Syntax
- [[https://orgmode.org/worg/dev/org-element-api.html][Org Element review]]

- [[https://orgmode.org/worg/dev/org-syntax.html][Syntax Specification]]

#+cindex:Org Parser
#+findex:org-element.el
#+cindex:parser
#+cindex:syntax specification
#+cindex:abstract syntax tree
#+cindex:AST
#+cindex:token
#+cindex:type
The library contains /tools/ to generate an /abstract syntax tree/ (AST) from an Org buffer, and
analyze the syntactical object at point.  There are parsing functions, with accessors and setters.
Each token in an Org document gets a type and some properties attached to it.  This information can
be extracted and modified with provided accessors and setters.

An exhaustive list of all types and attributes is given in section Types and Attributes.

** Org Syntax

#+cindex:paragraph
#+texinfo:@heading Paragraph---Unit of Measurement
The /paragraph/ is the unit of measurement.  Every other syntactical part exists within specific
/environments/, or /categories/.

Within the syntax, there exist /elements/ and /objects/.  Elements are related to the *structure*
of the document.  An element always starts and ends at the beginning of a line.  Objects are
related to the *content* of the document, and some can be recursive.

#+texinfo:@heading Syntactical Environments
#+cindex:types
#+cindex:environments

Three categories are used to classify the syntactical environments:

- Greater elements ::

  /Greater elements/ are all parts that can contain an element.  Greater elements can contain
  directly any other element or greater element except:

   - elements of their own type,

   - node properties, which can only be found in property drawers,

   - items, which can only be found in plain lists.

- Elements ::

  An /element/ defines syntactical parts that are at the same level as a paragraph, i.e. which
  cannot contain or be included in a paragraph.

- Objects ::

  An /object/ is a part that could be included in an element.

*** Elements---Greater Elements---Objects

#+cindex:elements
#+cindex:greater elements
#+texinfo:@heading Greater Elements

Elements containing other elements (and only elements) are called /greater elements/.  The
following are /greater elements/:

- center-block
- drawer
- dynamic-block
- footnote-definition
- headline
- inlinetask
- item
- plain-list
- property-drawer
- quote-block
- section
- special-block


#+cindex:elements
#+cindex:regular elements
#+texinfo:@heading Regular Elements

Regular elements include the following:

- babel-call
- clock
- comment
- comment-block
- diary-sexp
- example-block
- export-block
- fixed-width
- horizontal-rule
- keyword
- latex-environment
- node-property
- paragraph (can contain objects and plain text)
- planning
- quote-section
- src-block
- table
- table-row
- verse-block (can contain objects and plain text)


#+texinfo:@heading Affiliated Keywords
#+cindex:affiliated keywords
#+vindex:org-element-affiliated-keywords
Most elements accept a fixed set of keywords as attributes, called /affiliated keywords/.  They are
not to be confused with regular keywords, which are elements.  Affiliated keywords are stored in
the variable ~org-element-affiliated-keywords~, which contains:

- "CAPTION"
- "DATA"
- "HEADER"
- "HEADERS"
- "LABEL"
- "NAME"
- "PLOT"
- "RESNAME"
- "RESULT"
- "RESULTS"
- "SOURCE"
- "SRCNAME"
- "TBLNAME"
- "ATTR_..."


The following elements do not accept affiliated keywords:

: `clock', `headline', `inlinetask', `item', `planning', `node-property', `quote-section' `section' and `table-row' types


#+texinfo:@heading Objects

Objects include the following:

- bold
- code
- entity
- export-snippet
- footnote-reference
- inline-babel-call
- inline-src-block
- italic
- latex-fragment
- line-break
- link
- macro
- radio-target
- statistics-cookie
- strike-through
- subscript
- superscript
- table-cell
- target
- timestamp
- underline
- verbatim

*** Properties

#+cindex:property
Each *greater element*, *element* and *object* has a variable set of /properties/ attached to it.

#+texinfo:@heading Properties common to all types

Four attributes are shared by all types:

- =:begin=

- =:end=

- =:post-blank=

- =:parent=

*** Context-Free Elements
**** Headlines

A headline is defined as:

: STARS KEYWORD PRIORITY TITLE TAGS

- STARS :: is a string starting at column 0, containing at least one asterisk and ended by a space
  character.  The number of asterisks is used to define the level of the headline.  It’s the sole
  compulsory part of a headline.

- KEYWORD :: is a TODO keyword, which has to belong to the list defined in ~org-todo-keywords-1~,
  which contains all =TOOD= and =DONE= keywords in a buffer.  Case is significant.

- PRIORITY :: is a priority cookie, i.e. a single letter preceded by a hash sign # and enclosed
  within square brackets.

- TITLE :: can be made of any character but a new line.  Though, it will match after every other
  part have been matched.

- TAGS :: is made of words containing any alpha-numeric character, underscore, at sign, hash sign
  or percent sign, and separated with colons.

- COMMENT :: If the first word appearing in the title is “COMMENT”, the headline will be considered
  as “commented”. Case is significant.

- FOOTNOTES :: If the headline's title is the value contained in ~org-footnote-section~
  (e.g. “Footnotes”), it will be considered as a “footnote section”.  Case is significant.

- ARCHIVE :: If “ARCHIVE” is one of its tags, it will be considered as “archived”.  Case is
  significant.

- SECTION :: A headline contains directly one section (optionally), followed by any number of
  deeper level headlines.

**** Sections

A section contains directly any *greater element* or *element*.

Only a headline can contain a section.

As an exception, text before the first headline in the document also belongs to a section.

**** Planning Lines

**** Property Drawers

*** Types---Environments
**** Objects

#+cindex:object
An /object/ is a part that can be included within an element.

Most objects cannot contain objects.  Those which can will be specified.  Objects can only be found
in the following locations:

- affiliated keywords defined in [[*org-element-parsed-keywords][org-element-parsed-keywords]],
- document properties,
- headline titles,
- inlinetask titles,
- item tags,
- paragraphs,
- table cells,
- table rows, which can only contain table cell objects,
- verse blocks.

***** Entities and LaTeX Fragments

***** Export Snippets

***** Footnote References

***** Inline Babel Calls and Source Blocks

***** Line Breaks

***** Links

***** Macros

***** Targets and Radio Targets

***** Statistics Cookies

***** Subscript and Superscript

***** Table Cells

***** Timestamps

***** Text Markup
**** Elements

An /element/ defines syntactical parts that are at the same level as a paragraph, i.e. which cannot
contain or be included in a paragraph.

#+attr_texinfo: :options org-element-all-elements
#+begin_defvar
A variable defined in ~org-element.el~.  It contains a complete list of element types.

Its value is:

#+begin_example
babel-call center-block clock comment comment-block diary-sexp drawer dynamic-block
example-block export-block fixed-width footnote-definition headline horizontal-rule
inlinetask item keyword latex-environment node-property paragraph plain-list
planning property-drawer quote-block section special-block src-block table table-row
verse-block
#+end_example
#+end_defvar

Elements cannot contain any other element.

Only keywords whose name belongs to org-element-document-properties, verse blocks , paragraphs and
table rows can contain objects.

***** Babel Call

***** Center Block

***** Clock, Diary Sexp and Planning

***** Comments

***** Fixed Width Areas

***** Horizontal Rules

***** Horizontal Rules

***** LaTeX Environments

***** Node Properties

***** Paragraphs

***** Table Rows

**** Greater Elements

Unless specified otherwise, greater elements can contain directly any other element or greater
element except:

- elements of their own type,

- node properties, which can only be found in property drawers,

- items, which can only be found in plain lists.


#+attr_texinfo: :options org-element-greater-elements
#+begin_defvar
~org-element-greater-elements~ is a variable defined in ‘org-element.el’.

Its value is:

#+begin_example
center-block drawer dynamic-block footnote-definition headline inlinetask
item plain-list property-drawer quote-block section special-block table
#+end_example

This variable contains a list of recursive element types aka Greater Elements.
#+end_defvar

Unless specified otherwise, greater elements can contain directly any other element or greater
element except:

- elements of their own type,

- node properties, which can only be found in property drawers,

- items, which can only be found in plain lists.

***** Greater Blocks

***** Drawers and Property Drawers

***** Dynamic Blocks

***** Footnote Definitions

***** Inlinetasks

***** Plain Lists and Items

***** Property Drawers

***** Tables

*** Attributes

#+texinfo:@subheading Properties attached to all

Four attributes are shared by all types: 

- =:begin=

- =:end=

- =:post-blank=

- =:parent=


#+texinfo:@subheading Contents properties

Greater elements containing objects on the one hand, and elements or objects containing objects on
the other hand also have:

- =:contents-begin=

- =:contents-end=


#+texinfo:@subheading Affiliated keywords

In addition to these properties, each element can optionally get some more from affiliated
keywords, namely:

- =:caption=

- =:header=

- =:name=

- =:plot=

- =:results=

- =:attr_NAME=

- =:post-affiliated= : It refers to the buffer position after any affiliated keyword, when
  applicable, or to the beginning of the element otherwise.

**** org-element-all-elements---a variable

- babel-call

- center-block

- clock

- comment

- comment-block

- diary-sexp

- drawer

- dynamic-block

- example-block

- export-block

- fixed-width

- footnote-definition

- headline

- horizontal-rule

- inlinetask

- item

- keyword

- latex-environment

- node-property

- paragraph

- plain-list

- planning

- property-drawer

- quote-block

- section

- special-block

- src-block

- table

- table-row

- verse-block

**** org-element-all-objects---a variable

- bold
- code
- entity
- export-snippet
- footnote-reference
- inline-babel-call
- inline-src-block
- italic
- line-break
- latex-fragment
- link
- macro
- radio-target
- statistics-cookie
- strike-through
- subscript
- superscript
- table-cell
- target
- timestamp
- underline
- verbatim
**** Greater Elements

- Greater Blocks

- Drawers and Property Drawers

- Dynamic Blocks

- Footnote Definitions

- Inline Tasks

- Plain Lists and Items

- Property Drawers

- Tables

**** Elements

Elements cannot contain any other element.

Only /keywords/ whose name belongs to ~org-element-document-properties~, /verse blocks/ ,
/paragraphs/ and /table rows/ can contain objects.

- Babel Call

- Blocks

- Clock, Diary Sexp and Planning

- Comments

- Fixed Width Area

- Horizontal Rule

- Keywords

- LaTeX Environments

- Node Properties

- Paragraphs

- Table Rows

**** Objects

Objects can only be found in the following locations:

- affiliated keywords defined in org-element-parsed-keywords,
- document properties,
- headline titles,
- inlinetask titles,
- item tags,
- paragraphs,
- table cells,
- table rows, which can only contain table cell objects,
- verse blocks.


Most objects cannot contain objects. Those which can will be specified.

- Entities and LaTeX Fragments

- Export Snippets

- Footnote References

- Inline Babel Calls and Source Blocks

- Line Breaks

- Links

- Macros

- Targets and Radio Targets

- Statistics Cookies

- Subscript and Superscript

- Table Cells

- Timestamps

- Text Markup

**** Properties

- Babel call

- Bold

- Clock

- Code

- Comment

- Comment Block

- Diary Sexp

- Drawer

- Dynamic Block

- Entity

- Example Block

- Export Block

- Export Snippet

- Fixed Width

- Footnote Definition

- Footnote Reference

- Headline

- Horizontal Rule

- Inline Babel Call

- Inline Source Block

- Inlinetask

- Italic

- Item

- Keyword

- LaTeX Environment

- LaTeX Fragment

- Line Break

- Link

- Macro

- Node Property

- Paragraph

- Plain List

- Planning

- Property Drawer

- Quote Block

- Radio Target

- Section

- Special Block

- Src Block

- Statistics Cookie

- Strike Through

- Subscript

- Superscript

- Table

- Table Cell

- Table Row

- Target

- Timestamp

- Underline

- Verse Block

*** Affiliated Keywords

#+attr_texinfo: :options org-element-affiliated-keywords
#+begin_defvar
List of affiliated keywords as strings.  By default, all keywords setting attributes (e.g.,
"ATTR_LATEX") are affiliated keywords and need not to be in this list.

Its value is:

#+begin_example
"CAPTION" "DATA" "HEADER" "HEADERS" "LABEL" "NAME" "PLOT" "RESNAME" "RESULT"
"RESULTS" "SOURCE" "SRCNAME" "TBLNAME"
#+end_example
#+end_defvar

Many element types can be assigned /attributes/.  This is done by adding specific keywords, named
/affiliated keywords/, just above the element considered, with no blank lines allowed.

Affiliated keywords are built upon one of the following patterns:

: #+KEY: VALUE
: #+KEY[OPTIONAL]: VALUE
: #+ATTR_BACKEND: VALUE

- KEY ::

  - “CAPTION”,

  - “HEADER”,

  - “NAME”,

  - “PLOT” or

  - “RESULTS”

- BACKEND ::

  is a string constituted of alpha-numeric characters, hyphens or underscores.

- OPTIONAL :: can contain any character but a new line.  Only “CAPTION” and “RESULTS” keywords can
  have an optional value.

- VALUE :: can contain any character but a new line.


An affiliated keyword can appear more than once if KEY is either “CAPTION” or “HEADER” or if its
pattern is “#+ATTR_BACKEND: VALUE”.

“CAPTION”, “AUTHOR”, “DATE” and “TITLE” keywords can contain objects in their value and their
optional value, if applicable.

** Org Parser

#+texinfo:@heading The Org Parser

There are two major parsing functions.

The two major functions here are 

- [[*org-element-parse-buffer][~org-element-parse-buffer~]] ::
  which parses Org syntax inside the current buffer, taking into account region, narrowing, or even visibility if specified, and

- [[*org-element-parse-secondary-string][~org-element-parse-secondary-string~]] ::
  which parses objects within a given string.

*** Global Parsing Functions
**** org-element-parse-buffer

#+attr_texinfo: :options org-element-parse-buffer &optional granularity visible-only
#+begin_defun
Recursively /parse/ the buffer and return its structure.  If narrowing is in effect, only parse the
visible part of the buffer.

The Org buffer has a virtual node of type =org-data= and =nil= as /properties/, that is, no
properties are attached to it.  The data obtained from this function can be modified freely using
/setters/.

#+attr_texinfo: :indic b
- GRANULARITY :: determines the depth of the recursion.

  It can be set to the following symbols:

  - =headline= : parse headlines only

  - =greater-element= : do not recurse into greater elements except headlines and sections.  That
    is, the elements that are parsed are the top-level ones.

  - =element= : parse everything except objects and plain text

  - =object= : parse the complete buffer; this is the default.

- VISIBLE-ONLY :: when non-nil, do not parse the contents of hidden elements.

- RETURN VALUE :: elements and objects; an element or object is represented as a list with the
  pattern (TYPE PROPERTIES CONTENTS), where :
  #+attr_texinfo: :indic b
  - TYPE :: is a symbol describing the element or object.  One can retrieve it with
    [[*org-element-type][~org-element-type~]] function.

  - PROPERTIES :: is the list of attributes attached to the element or object, as a plist.  all
    types share ‘:begin’, ‘:end’, ‘:post-blank’ and ‘:parent’ properties.

    Properties values can be obtained by using [[*org-element-type][~org-element-property~]] function.

  - CONTENTS :: is a list of elements, objects or raw strings contained in the current element or
    object, when applicable.

    One can access them with [[*org-element-contents][~org-element-contents~]] function.


~org-element-map~ function can be used to find specific elements or objects within the parse tree.
#+end_defun
**** org-element-parse-secondary-string

*** Local Parsing
Local parsing gives information about the structure at point.

The first move is to implement a way to obtain the smallest element containing point.

- ~org-element-at-point~ ::

  It basically  jumps back to the  beginning of section  containing point and proceed,  one element
  after the  other, with ~org-element--current-element~ until  the container is found.   When using
  `org-element-at-point', secondary values are never parsed since the function focuses on elements,
  not on objects.

- ~org-element-context ::

  At a deeper level, ~org-element-context~ lists all elements and objects containing point.



~org-element-nested-p~ and ~org-element-swap-A-B~ may be used internally by navigation and
manipulation tools.

- org-element-nested-p ::

- org-element-swap-A-B :: 

**** org-element-at-point
<<org-element-at-point>>

This function returns the local /structure/ of the document around point.  It returns only
/elements/, not /objects/.

#+attr_texinfo: :options org-element-at-point
#+begin_defun
Determines the /type/ and /attribues/ of the closest /element/ to point.  This function does not
analyze the contents of objects, such as a paragraphs.  The companion local parsing function
~org-element-context~ goes deeper into the /object/ level.

Refer to the following links to see the difference between /elements/ and /objects/:

- [[*org-element-all-elements---a variable][list of elements]]

- [[*org-element-all-objects---a variable][list of objects]]


#+attr_texinfo: :indic b
- RETURN VALUE :: is a list of ~(type, props)~, where
  #+attr_texinfo: :indic b
  - TYPE :: is the type of the element

  - PROPS :: is a plist of properties associated with the element.  The exact properties dependes
    on the type, but will always include the following:

    - =:begin= :: is the beginning buffer position of the token

    - =:end= :: is the ending buffer position of the token; the =:end= property of this object
      matches the =:begin= property of the next token.

    - =:parent= :: is the element or object containing the token

    - =:post-blank= :: is the numnber of blank lines or white spaces at its end

#+end_defun

**** org-element-context
#+attr_texinfo: :options org-element-context &optional element
#+begin_defun
Returns the smallest /element/ or /object/ around point.

#+attr_texinfo: :indic b
- ELEMENT :: Optional argument ELEMENT, when non-nil, is the closest element
  containing point, as returned by [[org-element-at-point][~org-element-at-point~]].

  When it is provided, it allows for quicker computation.

- RETURN VALUE :: a list like (TYPE PROPS) where :
  #+attr_texinfo: :indic b
  - TYPE :: is the type of the element or object and

  - PROPS :: is a plist of properties associated with it.
#+end_defun

**** org-element-lineage

#+attr_texinfo: :options org-element-lineage datum &optional types with-self
#+begin_defun
List all ancestors of a given element or object.  Return ancestors from the closest to the
farthest.

When DATUM is obtained through ~org-element-context~ or ~org-element-at-point~, only ancestors from
its section can be found.  There is no such limitation when DATUM belongs to a full parse tree.

- DATUM :: is an object or element.

- TYPES :: when a list of symbols, return the first element or object in the lineage whose type
  belongs to that list instead.

- WITH-SELF :: when non-nil, lineage includes DATUM itself as the first element, and TYPES, if
  provided, also apply to it.
#+end_defun

**** org-element-nested-p

#+attr_texinfo: :options org-element-nested-p elem-A elem-B
#+begin_defun
Non-nil when elements ELEM-A and ELEM-B are nested.
#+end_defun

****  org-element-swap-A-B

#+attr_texinfo: :options  org-element-swap-A-B elem-A elem-B
#+begin_defun
Swap elements ELEM-A and ELEM-B.  Assume ELEM-B is after ELEM-A in the buffer.  Leave point at the
end of ELEM-A.
#+end_defun

** Parsing Helper Functions
#+texinfo:@heading Accessors

- ~org-element-type~

- ~org-element-property~

- ~org-element-contents~

- ~org-element-restriction~


#+texinfo:@heading Low-Level Setters

- ~org-element-put-property~

- ~org-element-set-contents~


#+texinfo:@heading High-Level Setters

- ~org-element-adopt-elements~

- ~org-element-set-element~

- ~org-element-extract-element~

- ~org-element-insert-before~


#+texinfo:@heading Helper Functions

- ~org-element-secondary-p~

- ~org-element-class~

- ~org-element-copy~


*** Accessors
Four accessor functions are provided.

The type and properties of a given /element/ or /object/ are obtained with, respectively:

**** org-element-type

#+attr_texinfo: :options org-element-type element
#+begin_defun
Returns the /type/ of ELEMENT.

- ELEMENT :: an element (or object).

- RETURN VALUE :: 

  - type :: type of ELEMENT; or

  - plain-text :: string; or

  - org-data :: a complete document; or

  - nil :: all other cases
#+end_defun

**** org-element-property

#+attr_texinfo: :options org-element-property property element
#+begin_defun
Extract the value from the PROPERTY of an ELEMENT.

- PROPERTY :: the /property/ to extract

- ELEMENT :: the /element/ from which to extract the property.
#+end_defun/

**** org-element-contents
This function returns an ordered (by buffer position) list of all elements or objects within a
given element or object.  Since local parsing ignores contents, it only makes sense to use this
function on a part of an AST.

#+attr_texinfo: :options org-element-contents element
#+begin_defun
Extract contents from an ELEMENT.
#+end_defun

**** org-element-restriction

#+attr_texinfo: :options org-element-restriction element
#+begin_defun
Return restriction associated to ELEMENT.

- ELEMENT :: ELEMENT can be an element, an object or a symbol representing an element or object
  type.
#+end_defun

*** Setters
Setter functions allow modification of elements by side effect.

The elements and objects of an AST may be modified freely.

Even though structures obtained with local parsers are mutable, it is good practice to consider
them immutable.  Destructively changing properties relative to buffer positions is likely to break
the caching mechanism running in the background.  If you need to slightly alter an element obtained
using these functions, first copy it, using [[*org-element-copy][~org-element-copy~]], before modifying it by side effect.

**** org-element-put-property
This function modifies any property of a given element or object.

#+attr_texinfo: :options org-element-put-property element property value
#+begin_defun
In ELEMENT set PROPERTY to VALUE.

Return modified element.
#+end_defun

**** org-element-set-contents

#+attr_texinfo: :options org-element-set-contents element &rest contents
#+begin_defun
Set ELEMENT's contents to CONTENTS.

Return ELEMENT.
#+end_defun

**** org-element-adopt-element
This function inserts an element after all children.

#+attr_texinfo: :options org-element-adopt-elements parent &rest children
#+begin_defun
Append elements to the contents of another element.  The function takes care of setting =:parent=
property for CHILD.

- PARENT :: is an element or object.

- CHILDREN :: can be elements, objects, or a strings.

- RETURN VALUE :: Returns PARENT element.
#+end_defun

**** org-element-set-element
This function replaces one element with another.

#+attr_texinfo: :options org-element-set-element old new
#+begin_defun
Replace element or object OLD with element or object NEW.

The function takes care of setting =:parent= property for NEW.
#+end_defun

**** org-element-extract-element
This function removes an element or object from an AST.

#+attr_texinfo: :options org-element-extract-element element
#+begin_defun
Extract ELEMENT from parse tree.

Remove ELEMENT from the parse tree by side-effect, and return it with its =:parent= property
stripped out.
#+end_defun

**** org-element-insert-before
This function and the next insert elements within the tree.  This one inserts an element before a
precise location.

#+attr_texinfo: :options org-element-insert-before element location
#+begin_defun
Insert ELEMENT before LOCATION in parse tree.  Parse tree is modified by side effect.

- ELEMENT :: the element to insert into the parse tree;

- LOCATION :: is an element, object or string within the parse tree.
#+end_defun

*** Tools
**** org-element-map

#+attr_texinfo: :options org-element-map data types fun &optional info first-match no-recursion with-affiliated
#+begin_defun
Map a function on selected elements or objects.

#+attr_texinfo: :indic b
- DATA :: is one of:
  - parse tree
  - element
  - object
  - string
  - list of constructs

- TYPES :: is one of:
  - symbol
  - list of symbols of elements or objects types

- FUN :: is the function called on the matching element or object; it must accept one argument: the
  element or object itself.  nil values returned from FUN do not appear in results.

- INFO :: when non-nil, is a plist holding export options, in which case those parts of the parse
  tree not exportable according to that property list will be skipped.

- FIRST-MATCH :: when non-nil, stop at the first match for which FUN doesn't return nil; return
  that value;

- NO-RECURSION :: is a symbol or a list of symbols representing element or objects types.  The FUN
  will not enter any recursive element or object whose type belongs to that list.  FUN can still be
  applied on them.

- WITH-AFFILIATED :: when non-nil, FUN will also apply to matching objects within parsed affiliated
  keywords.  See [[*org-element-parsed-keywords][~org-element-parsed-keywords~]].
#+end_defun

**** org-element-map---Examples
This function allows applying a function on elements or objects matching some type, and
accumulating the resulting values, and can be used to find specific elements or objects within the
parse tree.

This function can be used to collect data from an AST.

#+attr_texinfo: :options org-element-map DATA TYPES FUN &optional INFO FIRST-MATCH NO-RECURSION WITH-AFFILIATED
#+begin_defun
- DATA : a parse tree, an element, an object, a string, or a list of such.
- TYPES : a symbol or list of symbols of elements or object types.
- FUN : the function called on the matching element or object.


&optional

- INFO : a plist holding export options; parts of the parse tree not exportable according to this
  plist will be skipped
- FIRST-MATCH : when non-nil stop at the first match for which FUN returns non-nil value
- NO-RECURSION : a symbol or list of symbols representing elements or object types into which
  ~org-element-map~ won't enter recursively
- WITH-AFFILIATED : when non-nil, FUN will also apply to matching objects within parsed affiliated keywords.
#+end_defun


#+texinfo:@heading Some Examples

Assume TREE is a variable containing an Org buffer parse tree.

#+texinfo:@subheading Return a flat list of all src-block and example-block elements

- ~#'identity~

: (org-element-map tree '(example-block src-block) #'identity)

#+texinfo:@subheading Find the first headline with a level of 1 and a "phone" tag

- [[*org-element-property][~org-element-property~]]
- ~member~

It will return its beginning position:

#+begin_src emacs-lisp :eval no
(org-element-map tree 'headline
 (lambda (hl)
   (and (= (org-element-property :level hl) 1)
        (member "phone" (org-element-property :tags hl))
        (org-element-property :begin hl)))
 nil t)
#+end_src

#+texinfo:@subheading Return a flat list of all `plain-list' type elements in TREE that are not a sub-list themselves

This example makes use of the NO-RECURSION optional argument.
~org-element-map~ will not recurse into any =plain-list= types.

- ~#'identity~ function

: (org-element-map tree 'plain-list #'identity nil nil 'plain-list)

#+texinfo:@subheading Return a flat list of all `bold' type objects containing a `latex-snippet' type object

even looking into captions.  This example uses ~org-element-map~
inside of itself to further examine the current object.

#+begin_src emacs-lisp :eval no
(org-element-map tree 'bold
 (lambda (b)
   (and (org-element-map b 'latex-snippet #'identity nil t) b))
 nil nil nil t)
#+end_src

#+texinfo:@subheading Returns all paragraphs beginning a section in the current document:

- [[*org-element-property][~org-element-property~]]
- [[*org-element-type][~org-element-type~]]
- [[*org-element-contents][~org-element-contents~]]
- ~first-child~

#+begin_src emacs-lisp :eval no
(org-element-map (org-element-parse-buffer) 'paragraph
  (lambda (paragraph)
    (let ((parent (org-element-property :parent paragraph)))
      (and (eq (org-element-type parent) 'section)
           (let ((first-child (car (org-element-contents parent))))
             (eq first-child paragraph))
           ;; Return value.
           paragraph))))
#+end_src

#+texinfo:@subheading It can also be used as a predicate.

The following snippet returns a non-nil value when the document contains a checked item.

- [[*org-element-property][~org-element-property~]]

#+begin_src emacs-lisp :eval no
(org-element-map (org-element-parse-buffer) 'item
  (lambda (item) (eq (org-element-property :checkbox item) 'on))
  nil t)
#+end_src

**** org-element-parsed-keywords

#+attr_texinfo: :options org-element-parsed-keywords
#+begin_defvar
List of affiliated keywords whose value can be parsed.  Their value will be stored as a secondary
string: a list of strings and objects.  This list is checked after translations have been applied.

Its value is:
: 'CAPTION'
#+end_defvar

**** org-element-create

#+attr_texinfo: :options org-element-create type &optional props &rest children
#+begin_defun
Create a new element of type TYPE.

- TYPE ::

- PROPS :: when non-nil, is a plist defining the properties of the element.

- CHILDREN :: can be elements, objects or strings.
#+end_defun

**** org-element-copy

#+attr_texinfo: :options org-element-copy DATUM
#+begin_defun
Return a copy of DATUM.  =:parent= property is cleared and contents are removed in the process.

- DATUM :: is an element, object, string or nil.
#+end_defun
**** org-element-interpret-data

This function is the reciprocal operation of [[*org-element-parse-buffer][~org-element-parse-buffer~]]:

When provided an element, object, or even a full parse tree, it generates an equivalent string in
Org syntax.  Output is a normalized document: it preserves structure and blank spaces but it
removes indentation and capitalize keywords.

#+attr_texinfo: :options org-element-interpret-data data
#+begin_defun
Interpret DATA as Org syntax.

- DATA :: is a parse tree, an element, an object or a secondary string to interpret.

- RETURN VALUE :: Org syntax as a string.
#+end_defun
**** org-element-class

#+attr_texinfo: :options org-element-class datum &optional parent
#+begin_defun
Return class for ELEMENT, as a symbol.  Class is either `element' or `object'.

- DATUM :: the element

- PARENT :: Optional argument PARENT is the element or object containing DATUM.  It defaults to the
  value of DATUM `:parent' property.
#+end_defun
**** org-element-secondary-p

#+attr_texinfo: :options org-element-secondary-p object
#+begin_defun
Non-nil when OBJECT directly belongs to a secondary string.

Return value is the property name, as a keyword, or nil.
#+end_defun

**** org-element-lineage

#+attr_texinfo: :options org-element-lineage datum &optional types with-self
#+begin_defun
List all ancestors of a given element or object.

- DATUM :: is an object or element.

- TYPES :: when a list of symbols, return the first element or object in the lineage whose type
  belongs to that list instead.

- WITH-SELF :: when non-nil, lineage includes DATUM itself as the first element, and TYPES, if
  provided, also apply to it.
#+end_defun
* Commands

- ~(org-cycle &optional ARG)~ ::

  - ~<TAB>~ Cycle the subtree visibility.

  - ~C-u <TAB>~ Global cycling, i.e., ~<S-TAB>~

  - ~C-u C-u <TAB>~ Switch to initial visibility

- ~(org-global-cycle &optional ARG)~ ::

  - ~<S-TAB>~ | ~<C-u <TAB>~ Cycle the global visibility.

  - ~C-<N> <TAB>~ Show contents up to N levels.

- ~(org-insert-drawer &optional ARG DRAWER)~ ::

  - =C-c C-x d=: insert drawer interactively at point

  - =C-u C-c C-x d=: insert a PROPERTY drawer into the current entry.  (same as next)

  - =C-u M-x org-insert-drawer=: Insert a PROPERTY drawer into the current entry.

- ~(org-property-action)~ ::

     =C-c C-c=: Do an action on properties.  With point in a property drawer, this executes
     property commands.  A menu is presented.

  - =s=: set
  - =d=: delete
  - =D=: global delete
  - =c=: compute property

- ~(org-set-property PROPERTY VALUE)~ ::

  - =C-c C-x p=: In the current entry, set PROPERTY to VALUE

* Build Tools
:PROPERTIES:
:appendix: t
:custom_id: build-tools
:org-template-version: 0.6.42
:END:
** Makefile					:dependencies:env_vars:perl:
:PROPERTIES:
:appendix: t
:dependency1: make
:dependency2.0: AWS User account at https://aws.amazon.com
:dependency2.1: AWS cli v2 in PATH https://docs.aws.amazon.com/cli/index.html
:dependency2.2: See how to Install AWS CLI v2 at https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-mac.html
:dependency2.3: aws credentials: access token and secret access token stored in ~/.aws/credentials
:dependency2.4: AWS S3 buckets set up for serving a static web page
:dependency3: GitHub Account with personal access token stored in GITHUB_TOKEN
:dependency4: texinfo @6.7._
:dependency5: Emacs, Org-mode, Babel language 'shell' enabled
:env_var1: SYNC_ORG_TEMPLATE: holds the full path to this Template.org file
:env_var2: GITHUB_TOKEN: holds the GitHub personal access token
:env_var3: EDITOR: must hold a reference to a working emacsclient server
:env_var4: COLORS
:org-template-version: 0.6.42
:END:

#+pindex:Makefile
#+name:Makefile
#+header: :tangle Makefile
#+begin_src makefile

  ###############################################################################
  ### USER-DEPENDENT VARIABLES
  ### USE ENVIRONMENT VARIABLES WHENEVER POSSIBLE

  # NOTE: All environment variables need to be exported PRIOR to starting the
  # Emacs server as EDITOR in your shell startup files; otherwise, they will not
  # be available to Emacs.
  # When I moved from using Bash to Zsh, I inadvertently changed the order of
  # import, and started the Emacs server before importing, and caused a horrible
  # bug which caused the program to work on one computer but fail on another.

  # The absolute path to this Template file
  TEMPLATE := $(SYNC_ORG_TEMPLATE)


  ### TOOLS & RESOURCES
  # tools is a directory holding tangled scripts, such as cmprpl
  # resources is a directory holding static resources for the project
  # images is a directory holding jpg and png image files
  RESOURCES := resources
  TOOLS	    := $(RESOURCES)/tools
  IMAGES    := $(RESOURCES)/images
  CMPRPL    := $(TOOLS)/cmprpl

  # Use emacsclient as $EDITOR; make sure it is set in a shell startup file and
  # the server has been started.
  EMACS	  := $(EMACS)
  EDITOR  := $(EDITOR)

  # User’s personal GitHub token for authentication to GitHub
  # DO NOT HARD-CODE THIS VALUE
  GITHUB_TOKEN := $(GITHUB_TOKEN)

  # The AWS Command Line Interface (AWS CLI) is an open source tool
  # that enables you to interact with AWS services using commands in
  # your command-line shell.  It must be present on your system.  Run the 'make'
  # command 'install-aws-cli' to install it if you do not have it.  Be sure to
  # run 'aws configure' after installing it.  This will place your AWS
  # credentials into ~/.aws/credentials.
  AWS := aws
  S3  := $(AWS) s3
  CFD := $(AWS) cloudfront

  ### END OF USER-DEPENDENT VARIABLES
  ###############################################################################
  ### MAKE-GENERATED VARIABLES

  ### PROJ AND ORG
  # ORG is the name of this Org file with extension .org
  # PROJ is the project name---the Org file name without extension.

  ### NOTE: there can be only one Org file in the project directory;
  # so far this has not been a problem, but it might be.

  PWD  := $(shell pwd)
  ORG  := $(shell ls *.org)
  PROJ := $(basename $(ORG))

  ### NOTE: S is needed only for the Template file because of the way it is nested
  # one level deep in the Templates GitHub repo, which uses the plural form
  # of Templates, whereas this file uses the singular form, Template.  So when
  # the homepage link is updated, the curl command must be told to use the plural
  # form.	 This is obviously a hack only for my own use and can be removed once
  # I clean up this anomaly.

  ifeq ($(PROJ),$(basename $(notdir $(TEMPLATE))))
  S := s
  endif

  # The AWS S3 bucket to use to store the html source file; it is found at the
  # key #+bucket towards the beginning of the file and should include the appropriate
  # suffix (.com, .net, .org, etc)
  BUCKET       := $(shell $(EDITOR) --eval \
		 '(with-current-buffer (find-file-noselect "$(ORG)") \
		    (save-excursion \
		      (goto-char (point-min)) \
		      (re-search-forward "^\#[+]bucket:\\(.*\\)$$" nil t) \
		      (match-string-no-properties 1)))')
  S3_BUCKET    := s3://$(BUCKET)

  # Buckets set up to serve static web sites from S3 can use either http
  # or https protocols; some  http protocols will automatically redirect
  # to https;  however, some only use  http. I would like  to accomodate
  # both, and  so this code  finds the url's  that are in  my Cloudfront
  # account, which presumably will serve https.  If the url is not here,
  # then this must be set up to serve http instead.
  HTTP_S := $(shell $(CFD) list-distributions | perl -MJSON::PP -e \
	  '$$/=""; \
	   my @urls = (); \
	   my $$json=JSON::PP->new->decode(<STDIN>); \
	   for my $$item ( @{$$json->{"DistributionList"}{"Items"}} ) { \
		  push @urls, @{$$item->{"Aliases"}{"Items"}}; \
	   } \
	  my $$found = grep { /'$(BUCKET)'/ } @urls; \
	  print "http", ($$found ? "s" : "");')

  HTTPS_BUCKET := https://$(BUCKET)

  ### DIR, SRC
  # DIR is the .info name found at '#+texinfo_filename:<DIR>.info' (at
  # the bottom of this file in the export configuration settings)
  # without its extension, used as the INFO filename and the name of the
  # HTML export directory; this code uses the lowercased PROJ name if
  # there is no '#+texinfo_filename'.
  # SRC is HTML directory based upon the DIR name

  #DIR := $(shell $(EDITOR) --eval \
  #	'(with-current-buffer (find-file-noselect "$(ORG)") \
  #		(save-excursion \
  #		(goto-char (point-min)) \
  #		(re-search-forward "^\#[+]\\(?:texinfo_filename\\|TEXINFO_FILENAME\\):\\(.*\\).info$$" nil t) \
  #		(match-string-no-properties 1)))')

  DIR := $(shell sed -E -n "/^\#\+texinfo_filename/s/^.*:(.*)\.info$$/\1/p" $(ORG))
  ifeq ($(DIR),$(EMPTY))
	  DIR := $(shell echo $(PROJ) | tr "[:upper:]" "[:lower:]")
  endif

  SRC := $(DIR)/

  ### VERS: v1.2.34/
  # VERS is the version number of this Org document.
  # When sync is run after the version number has been updated, then VERS
  # picks up the newly-changed value.  VERS used to be staticly imbedded
  # when the Makefile was tangled, but it needs to be dynamic for
  # development.

  # QUERY: should this number be formatted like this, or should it be just the numbers?
  # The reason it includes them is the S3PROJ obtains the name from the S3 bucket, and
  # it includes them.  But it only includes them because I have made it so.  Not a good
  # reason just by itself.  The ending slash is not actually a part of the version, but
  # comes from the way the 'aws2 ls' command returns its values.	So VERS should probably
  # not include the trailing slash, although it doesn’t hurt anything.

  VERS := v$(shell $(EDITOR) --eval \
	  '(with-current-buffer (find-file-noselect "$(ORG)") \
		  (save-excursion \
		    (goto-char (point-min)) \
		    (re-search-forward "^\#[+]\\(?:macro\\|MACRO\\):version Version \\(\\(?:[[:digit:]]+[.]?\\)\\{3\\}\\)") \
		    (match-string-no-properties 1)))')/

  ### AWS
  # PROJ_LIST contains the list of projects currently uploaded to
  # the S3 bucket; each item contains the name of the project and its
  # current version.

  # Created function using elisp instead of the shell.
  # This variable contains an elisp list of strings of the form '("proj1-v1.2.3/" "proj2-v4.5.6/" ...)'
  # However, when it prints to the shell, the quotes are lost.
  # Need to make sure elisp's variable 'exec-path contains the proper $PATH instead of adding to 'exec-path.

  PROJ_LIST := $(shell $(EDITOR) --eval \
	  "(progn \
		  (require (quote seq)) (add-to-list (quote exec-path) (quote \"/usr/local/bin\")) \
		  (seq-map (lambda (s) (replace-regexp-in-string \"^\s+PRE \" \"\" s)) \
			  (seq-filter (lambda (s) (string-match-p (regexp-quote \" PRE \") s)) \
			  (process-lines \"$(AWS)\" \"s3\" \"ls\" \"$(S3_BUCKET)\"))))")

  ### S3PROJ
  # The name of the current project as obtained from S3: 'proj-v1.2.34/'
  # If there is no current project in the S3 bucket, then assign a value equal to
  # the Org project and version instead.  It is set to the project if found, and
  # NO if not found, then updated in the ifeq block below.
  S3PROJ := $(shell $(EDITOR) --eval \
		  '(let ((proj (seq-find (lambda (s) (string-match-p "$(DIR)" s)) (quote $(PROJ_LIST))))) \
		     (or proj (quote NO)))')

  ### PROJINS3
  # is used by make sync; this allows the index.html file to be generated the first
  # time the project is synced.  It is set to NO if this project is not currently in an
  # S3 bucket, and it is set to YES if it is.
  PROJINS3 :=

  ### S3VERS
  # The version of this project currently installed in the S3 bucket: 'v1.2.34/'
  # If there is no current version in the S3 bucket, then assign the version from
  # this Org file instead.
  S3VERS   :=

  # Update S3PROJ, S3VERS, and PROJINS3
  ifeq ($(S3PROJ), NO)
	  S3PROJ := $(DIR)-$(VERS)
	  S3VERS := $(VERS)
	  PROJINS3 := NO
  else
	  S3VERS := $(subst $(DIR)-,,$(S3PROJ))
	  PROJINS3 := YES
  endif

  ### GITHUB
  # USER is the current user's GitHub login name.

  # The user name used to be statically embedded into the Makefile
  # during tangle, but in an effort to make the Makefile dynamically
  # indepedent, dynamic code has replaced the static code.  The code
  # that placed the static name in the Makefile was a 'node' script that
  # ran in a separate Org process during tangle.	An unfortunate fact of
  # 'make' is that 'make' strips the quote marks from the string
  # obtained from the 'curl' command when the 'make shell' command
  # returns the string.	 This makes the string malformed JSON and
  # unparsable by most JSON parsers, including 'node’.	However,
  # 'perl'’s core module JSON::PP (but not JSON::XS) has facilities to
  # parse very malformed JSON strings.	Therefore, this dynamic code
  # uses 'perl' and the core module JSON::PP to parse the 'curl' string
  # into a 'perl' JSON object which can return the login name.	This
  # code should work with any version of 'perl' without having to
  # install any modules.

  USER	:= $(shell \
	    curl -sH "Authorization: token $(GITHUB_TOKEN)" https://api.github.com/user \
	    | \
	    perl -MJSON::PP -e \
		'$$/ = ""; \
		 my $$json = JSON::PP->new->loose->allow_barekey->decode(<STDIN>); \
		 print $$json->{login};' \
	    )
  SAVE		:= resources

  ### TEXINFO
  TEXI		:= $(PROJ).texi
  INFO		:= $(DIR).info
  INFOTN	:= $(shell $(EDITOR) --eval "(file-truename \"$(INFO)\")")
  PDF		:= $(PROJ).pdf
  INDEX		:= index.html
  HTML		:= $(DIR)/$(INDEX)
  DIR_OLD	:= $(DIR)-old

  ### AWS S3
  DST_OLD	:= $(S3_BUCKET)/$(S3PROJ)
  DST_NEW	:= $(S3_BUCKET)/$(DIR)-$(VERS)
  EXCL_INCL	:= --exclude "*" --include "*.html"
  INCL_IMAGES	:= --exclude "*" --include "*.jpg" --include "*.png"
  GRANTS	:= --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
  S3SYNC	:= $(S3) sync --delete $(EXCL_INCL) $(SRC) $(DST_OLD) $(GRANTS)
  S3MOVE	:= $(S3) mv --recursive $(DST_OLD) $(DST_NEW) $(GRANTS)
  S3COPY	:= $(S3) cp $(INDEX) $(S3_BUCKET) $(GRANTS)
  S3REMOVE	:= $(S3) rm $(S3_BUCKET)/$(S3PROJ) --recursive
  S3IMAGESYNC	:= $(S3) sync $(INCL_IMAGES) $(IMAGES) $(S3_BUCKET)/$(IMAGES) $(GRANTS)

  ###############################################################################

  default: check texi info html pdf

  PHONY: default all check values boot \
	    texi info html pdf \
	    open-org open-texi open-html open-pdf \
	    clean dist-clean wiped-clean \
	    help sync update delete-proj \
	    install-aws-cli \
	    index-html upload-index-html

  values: check
	    @printf "$${BLUE}Values...$${CLEAR}\n"
	    @echo TEMPLATE:	$(TEMPLATE)
	    @echo EDITOR:	$(EDITOR)
	    @echo USER:		$(USER)
	    @echo PWD:		$(PWD)
	    @echo ORG:		$(ORG)
	    @echo TEXI:		$(TEXI)
	    @echo INFO:		$(INFO)
	    @ECHO INFOTN:	$(INFOTN)
	    @echo BUCKET:	$(BUCKET)
	    @echo PROJ:		$(PROJ) $S
	    @echo S3_BUCKET:	$(S3_BUCKET)
	    @echo HTTP_S:	$(HTTP_S)
	    @echo HTTPS_BUCKET:	$(HTTPS_BUCKET)
	    @echo VERS:		$(VERS)
	    @echo S3PROJ:	$(S3PROJ)
	    @echo S3VERS:	$(S3VERS)
	    @echo DIR:		$(DIR)
	    @echo DIR_OLD:	$(DIR_OLD)
	    @echo SRC:		$(SRC)
	    @echo DST_OLD:	$(DST_OLD)
	    @echo DST_NEW:	$(DST_NEW)
	    @echo PROJ_LIST:	"$(PROJ_LIST)"
	    @echo PROJINS3:	$(PROJINS3)

  check:
	    @printf "$${BLUE}Checking dependencies...$${CLEAR}\n"

	    @[[ -z $(BUCKET) ]] && \
	       { printf "$${RED}$(BUCKET) $${CYAN}must be set.$${CLEAR}\n"; exit 1; } || \
	       printf "$${CYAN}BUCKET: $${GREEN}$(BUCKET)$${CLEAR}\n";

	    @[[ -z $${GITHUB_TOKEN} ]] && \
	       { printf "$${RED}GITHUB_TOKEN $${CYAN}must be set.$${CLEAR}\n"; exit 1; } || \
	       printf "$${CYAN}GITHUB_TOKEN: $${GREEN}SET$${CLEAR}\n";

	    @[[ (-d ~/.aws) && (-f ~/.aws/credentials) && (-f ~/.aws/config) ]] && \
	       printf "$${CYAN}AWS credentials and config: $${GREEN}SET$${CLEAR}\n" || \
	       { printf "$${RED}~/.aws 'credentials' and 'config' must be set.$${CLEAR}\n"; exit 1; }

	    @[[ "$(shell $(EDITOR) --eval '(member (quote texinfo) org-export-backends)')" = "(texinfo)" ]] && \
		  printf "$${CYAN}Texinfo backend: $${GREEN}INSTALLED.$${CLEAR}\n" || \
		  { printf "$${YELLOW}Texinfo backend:$${CLEAR} $${RED}NOT INSTALLED; it must be installed.$${CLEAR}\n"; exit 1; }

	    @[[ $(shell $(EDITOR) --eval '(symbol-value org-confirm-babel-evaluate)') == "t" ]] && \
		  { printf "$${YELLOW}org-confirm-babel-evaluate:$${CLEAR} $${RED}T; set to NIL.$${CLEAR}\n"; exit 1; } || \
		  printf "$${CYAN}org-confirm-babel-evaluate: $${GREEN}OFF.$${CLEAR}\n\n"

  open-org: $(ORG)
	    @$(EDITOR) -n $(ORG)
  $(ORG):
	    @echo 'THERE IS NO $(ORG) FILE!!!'
	    exit 1

  texi: $(TEXI)
  $(TEXI): $(ORG)
	   @echo Making TEXI...
	   @$(EDITOR) -u --eval \
		  "(with-current-buffer (find-file-noselect \"$(ORG)\" t) \
			  (save-excursion \
			  (org-texinfo-export-to-texinfo)))"
	   @echo Done making TEXI.
  open-texi: texi
	   @$(EDITOR) -n $(TEXI)

  info: $(INFO)
  $(INFO): $(TEXI)
	   @echo Making INFO...
	   @makeinfo -o $(INFO) $(TEXI)
	   @$(EDITOR) -u -eval \
		  "(when (get-buffer \"$(INFO)\") \
			  (with-current-buffer (get-buffer \"$(INFO)\") \
				  (revert-buffer t t t)))"
	   @echo Done making INFO.

  open-info: info
	   @$(EDITOR) -u -eval \
		  "(if (get-buffer \"*info*\") \
			  (with-current-buffer (get-buffer \"*info*\") \
				(when (not (string= \"(symbol-value (quote Info-current-file))\" \"$(INFOTN)\")) \
					(info \"$(INFOTN)\")) \
				(revert-buffer t t t)) \
		      (info \"$(INFOTN)\"))"

  html: $(HTML)
  $(HTML): $(TEXI)
	   @echo Making HTML INFO..
	   @makeinfo --html -o $(DIR) $(TEXI)
	   @echo Done making HTML.
	   $(CMPRPL) $(DIR) $(DIR_OLD)
  open-html: html
	   @open $(HTML)

  # If pdftexi2dvi produces an error, it may still produce a viable PDF;
  # therefore, use --tidy.  If it produces an error, try to link the PDF;
  # if it does not produce an error, the PDF will be added to the top dir
  # and there will be no attempt to link.
  pdf:	$(PDF)
  $(PDF): $(TEXI)
	  @echo Making PDF INFO...
	  @-pdftexi2dvi --quiet --build=tidy $(TEXI) || ln -s $(PROJ).t2d/pdf/build/$(PDF) $(PDF)
	  @echo Done making PDF.
  open-pdf:pdf
	   @open $(PDF)

  sync:   $(HTML)
	  @echo Syncing version $(VERS) onto $(S3VERS)...
	  $(S3SYNC)
	  $(S3IMAGESYNC)
	  @echo Done syncing.
	  [[ $(VERS) != $(S3VERS) ]] && { echo Moving...; $(S3MOVE); echo Done moving.;  make homepage; } || :
	  [[ $(PROJINS3) = "NO" ]] && make homepage || :

  # This is a target-specific variable for updating the “description”
  # key on the GitHub repo page with the current version number.  It
  # first makes a curl call to the GitHub project repo, finds the
  # “description” line, pulls out the description only (leaving the old
  # version) and then prints the value with the current version number.
  # This value is used by the “homepage:” target in the PATCH call.
  # This method is arguably harder to code but faster to run than using
  # Perl with the JSON::PP module.

  homepage: description = $(shell \
	  curl -s \
		  -H "Authorization: token $(GITHUB_TOKEN)" \
		  https://api.github.com/repos/$(USER)/$(PROJ)$S | \
		  (perl -ne 'if (/^\s*\"description\":\s*\"(.*): v(?:(?:[[:digit:]]+[.]?){3})/) {print $$1}'))

  ### NOTE the use of the S variable at the end of PROJ; this is to handle
  # the singular case of the GitHub repo using the plural form, Templates
  # whereas the the Template.org file uses the singular form.
  homepage: $(ORG) upload-index-html
	    @echo Updating homepage...
	    @echo DESCRIPTION: $(description)
	    @echo VERS: $(VERS)
	    @curl -i \
		  -H "Authorization: token $(GITHUB_TOKEN)" \
		  -H "Content-Type: application/json" \
		  -X PATCH \
		  -d "{\"homepage\":\"$(HTTPS_BUCKET)/$(DIR)-$(VERS)\",\
		       \"description\":\"$(description): $(VERS)\"}" \
		  https://api.github.com/repos/$(USER)/$(PROJ)$S
	    @echo Done updating homepage.

  delete-proj:
	  @echo Deleting project $(PROJ)...
	  @curl -i \
		  -H "Authorization: token $(GITHUB_TOKEN)" \
		  -H "Accept: application/vnd.github.v3+json" \
		  -X DELETE \
		  https://api.github.com/repos/$(USER)/$(PROJ)$S
	  @$(S3REMOVE)
	  @make dist-clean
	  @make upload-index-html
	  @$(EDITOR) -u --eval "(kill-buffer \"$(ORG)\")"
	  @rm -rf "../$(PROJ)"
	  @echo Done deleting project.

  index-html: $(INDEX)
  $(INDEX): $(ORG)
	  @echo making index.html...
	  $(EDITOR) --eval \
	  "(with-current-buffer (find-file-noselect \"$(ORG)\") \
		  (save-excursion \
		    (org-link-search \"#project-index-title\") \
		    (org-export-to-file (quote html) \"index.html\" nil t)))"
	  @echo Done making index.html.

  upload-index-html: $(INDEX)
	   @echo Uploading index.html...
	   $(S3COPY)
	   @echo Done uploading index.html

  install-aws-cli:
	    curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg" && \
	    sudo installer -pkg AWSCLIV2.pkg -target / && \
	    which aws && aws --version
	    rm -rf AWSCLIV2.pkg

  clean:
	  @echo Cleaning...
	    -@rm *~ 2>/dev/null
	    -@for file in *.??*; \
	    do \
		    ext=$${file#$(PROJ).}; \
		    [[ ! $${ext} =~ org|texi|info|pdf|html ]] && rm -rv $${file}; \
	    done

  dist-clean: clean
	  @echo Dist Cleaning...
	    @${EDITOR} -u --eval \
	      "(kill-buffer \"$(ORG)\")"
	    -@rm -rf *.{texi*,info*,html*,pdf*} $(DIR) $(TOOLS)
	    -@for dir in *; \
		do \
		    [ -d $$dir -a $$dir != "$(DIR_OLD)" -a $$dir != $(SAVE) ] && \
		    rm -vr $$dir; \
		done

  wipe-clean: dist-clean
	  @echo Wipe Clean...
	    -@rm -rf Makefile Readme.md $(DIR_OLD)
	    @git checkout Makefile README.md

  git-ready: dist-clean
	    git checkout Makefile
	    git checkout README.md
	    git status

  help:
	    @echo '"make boot" tangles all of the files in Template'
	    @echo '"make default" makes the .texi file, the .info file, \
	    the html files, and the .pdf file.'
	    @echo

	    @echo '"make check" checks for prerequistes'
	    @echo '"make values" runs check and prints variable values'
	    @echo

	    @echo '"make texi" makes the .texi file'
	    @echo '"make info" makes the .info file'
	    @echo '"make html" makes the html distribution in a subdirectory'
	    @echo '"make pdf" makes the .pdf file'
	    @echo

	    @echo '"make open-org" opens the ORG program using emacsclient for editing'
	    @echo '"make open-texi" opens the .texi file using emacsclient for review'
	    @echo '"make open-html" opens the distribution index.html file \
	    in the default web browser'
	    @echo '"make open-pdf" opens the .pdf file'
	    @echo

	    @echo '"make sync" syncs the html files in the AWS S3 bucket BUCKET; \
	    you must have your AWS S3 bucket name in the env var AWS_S3_BUCKET; \
	    You must have your AWS credentials installed in ~/.aws/credentials'
	    @echo

	    @echo '"make install-aws-cli" installs the "aws cli v2" command-line tools'
	    @echo 'You also need to run "aws configure" and supply your Access Key and Secret Access Key'
	    @echo

	    @echo '"make clean" removes the .texi, .info, and backup files ("*~")'
	    @echo '"make dist-clean" cleans, removes the html distribution, \
	    and removes the build directory'
	    @echo '"make wipe-clean" wipes clean the directory, including old directories'
	    @echo

	    @echo '"make delete-proj" deletes the project from the file system, GitHub and AWS'

#+end_src

*** TODO Next
1. The CloudFront configuration needs to be updated recognize the new version
   directory that is created as part of the ~sync~ operation.

2. Update the GitHub HOME website link for each new sync operation.

3. Store on GitHub a version of each other format upon a sync operation (i.e.,
   the INFO and PDF versions)

** Compare Replace

#+begin_comment
The following source code tangles all files during an export operation. This is
to  make  sure  the  ~cmprpl~  source code  exists  in  the  ~resources/tools/~
directory before running  the Makefile target =html=. It also  makes sure there
is a Makefile on an initial export. The following code is not exported.
#+end_comment

#+name:tangle-org-file
#+header: :exports results :eval yes :results silent
#+begin_src emacs-lisp
(org-babel-tangle-file (buffer-file-name))
#+end_src

The  AWS ~sync~  command  relies  upon time  stamps  to  determine whether  two
programs are identical or not, as  well as content.  If two otherwise identical
files have  different time stamps,  ~sync~ will  assume they are  different and
will  process the  newer.   However, the  ~texinfo~  ~makeinfo --html~  command
produces all  new files even  if some files  (or most files)  remain unchanged.
This  means that  all files  will be  uploaded to  the AWS  S3 bucket  on every
iteration, even though the majority of the files are actually unchanged.

The ~cmprpl~  source code attempts to  resolve the issue of  identical exported
code having different  time stamps, thus defeating the benefit  provided by the
~aws2 s3 sync~ command uploading only changed files.

This program makes sure that a generated HTML directory exists: =$DIR_NEW=.  If
it doesn’t, then it is in an improper state and the program stops with an error
message.

The  program then  checks  if  an old  directory  exists,  =$DIR_OLD=.  If  one
doesn’t,  then one  is  created by  copying the  current  new directory.   This
provides a baseline  for comparisons going forward.  The program  exits at that
point. It is very important that  the =$DIR_OLD= directory not be deleted going
forward.

Given  that =$DIR_OLD=  exists, the  program then  loops through  all files  in
=$DIR_NEW= and  compares them  to the  files in =$DIR_OLD=.   If the  files are
identical, the =$DIR_OLD= file replaces the =$DIR_NEW= file while retaining the
old time stamp (using the ~-p~ option of ~cp~. If a file is different, then the
=$DIR_NEW= file  replaces the =$DIR_OLD=  file, thus giving it  updated content
and  an updated  time stamp.   If the  file does  not exist  in the  =$DIR_OLD=
directory, then it is added.

The  program then  loops through  all of  the files  in the  old directory  and
deletes  any that  do not  exist in  the new  directory.  Now  both directories
should be in sync.

#+caption:Compare Replace program
#+name:cmprpl
#+header: :mkdirp t
#+header: :shebang "#!/usr/bin/env bash"
#+begin_src sh :tangle resources/tools/cmprpl
  [[ $# -eq 2 ]] || { echo "ERROR: Incorrect command line arguments"; exit 1; }
  DIR_NEW=$1
  DIR_OLD=$2

  [[ -d $DIR_NEW ]] || { echo "ERROR: $DIR_NEW does not exist"; exit 1; }
  [[ -d $DIR_OLD ]] || { echo "CREATING: $DIR_OLD does not exist"; cp -a $DIR_NEW $DIR_OLD; exit 0; }

  for newfile in $DIR_NEW/*
  do
      oldfile=$DIR_OLD/$(basename $newfile)
      if [[ -e $oldfile ]]
      then
	 if cmp -s $newfile $oldfile
	 then
	     printf "${GREEN}copying OLD to NEW${CLEAR}: "
	     cp -vp $oldfile $newfile
	 else
	     printf "${PURPLE}copying NEW to OLD${CLEAR}: "
	     cp -vp $newfile $oldfile
	 fi
      else
	  printf "${BLUE}creating NEW in OLD${CLEAR}: "
	  cp -vp $newfile $oldfile
      fi
  done

  for oldfile in $DIR_OLD/*
  do
      newfile=$DIR_NEW/$(basename $oldfile)
      if [[ ! -e $newfile ]]
      then
	  printf "${RED}removing OLD${CLEAR}: "
	  rm -v $oldfile
      fi
  done
#+end_src


** Update Utility Commands
*** Get Parsed Org Tree
This function looks for an Org file in the present working directory, and if it
finds one returns  a parsed tree using  ~org-element-parse-buffer~.  It returns
=nil= if there is no Org file or if the found file is not in ~org-mode~.

#+name:get-parsed-org-tree
#+header: :results silent
#+begin_src emacs-lisp
(defun get-parsed-org-tree (&optional org-dir)
  "This function takes an optional directory name, changes to
that directory if given, otherwise uses the pwd, and finds an Org
file and returns its parsed tree, or nil if none found."
  (when org-dir
      (cd (file-name-as-directory org-dir)))
  (let ((buf (car-safe (find-file-noselect "*.org" nil nil t))))
    (if buf
	(with-current-buffer buf (org-element-parse-buffer))
      nil)))
#+end_src

*** Check for CID
This code  checks whether an  Org file contains  a =custom_id= of  a particular
value.  It accepts  a ~cid-value~ and an optional directory.   If the directory
is not given, then it defaults to the current directory.  If throws an error if
the directory does not exist.  It returns =nil= if the given directory does not
contain an Org file.   It returns =t= if the Org file  contains a node property
of   =custom_id=  and   value  ~cid-value~,   or   =nil=  if   not.   It   uses
~get-parsed-org-tree~.

#+name:org-tree-cid-p
#+header: :results silent
#+begin_src emacs-lisp
(defun org-tree-cid-p (cid-value &optional org-dir)
  "Check whether an org file contains a custom_id of CID"
  (let ((tree (get-parsed-org-tree org-dir)))
    (car (org-element-map tree 'property-drawer
	   (lambda (pd) (org-element-map (org-element-contents pd) 'node-property
			  (lambda (np)
			    (and
			     (string= "custom_id" (org-element-property :key np))
			     (string= cid-value (org-element-property :value np))))))
	   nil t))))
#+end_src

#+name:run-org-tree-cid-p
#+header: :var cid="build-tools"
#+header: :var dir="/usr/local/dev/programming/MasteringEmacs"
#+header: :var gpot=get-parsed-org-tree()
#+header: :var otcp=org-tree-cid-p()
#+header: :results value
#+header: :eval never-export
#+begin_src emacs-lisp
(org-tree-cid-p cid dir)
#+end_src

#+call: run-org-tree-cid-p(dir="/usr/local/dev/programming/MasteringEmacs")

*** Keywords and Values
This function takes  an Org file name and optionally  a directory (otherwise it
uses the default  directory) and returns the  value of a keyword.   It does not
use a parse tree, but rather loops through the file line-by-line until it finds
the keyword and then returns its value.

#+name:get-keyword-value
#+begin_src emacs-lisp
  (defun get-keyword-value (keyword-to-get org-file-name &optional dir)
    "Returns the value of a keyword in an Org buffer identified by ORG-FILE-NAME.
  Uses the current directory unless an optional DIR is supplied.
  Returns NIL if none is found.  Rather than parsing the whole Org
  buffer into a tree, this function simply starts at the beginning
  of the file and loops line by line through the file, returning
  when the key has been found or it reaches the end of the file."
    (with-current-buffer
	(find-file-noselect
	 (concat
	  (if dir (file-name-as-directory dir) default-directory)
	  org-file-name))
      (save-excursion
	(goto-char (point-min))
	(let ((done nil)
	      (ans nil))
	  (while (not done)
	    (let* ((el (org-element-at-point))
		   (ty (org-element-type el))
		   (key (org-element-property :key el))
		   (val (org-element-property :value el)))
	      (when (and
		     (string-equal ty "keyword")
		     (string-equal key keyword-to-get))
		(setq ans val done t))
	      (forward-line)
	      (when (eobp)
		(setq done t))))
	  ans))))
#+end_src

#+name:get-title-for-org-buffer
#+begin_src emacs-lisp
(defun get-title-for-org-buffer (org-file-name &optional dir)
"A wrapper around `get-keyword-value' to find a TITLE in an Org buffer."
  (get-keyword-value "TITLE" org-file-name dir))
#+end_src

** Bucket Index HTML
The bucket should contain a master ~index.html~  file that links to each of the
individual project  ~index.html~ files.  The  master ~index.html~ file  will be
placed at the root of  the bucket, ~https://<bucket-name>.com/~, and the bucket
must be set up to serve this ~index.html~ when the user hits the root.

*** Get Bucket Name
 This  code searches  for  the keyword-value  pair =bucket:<BUCKET-NAME>=  that
 should be  located towards the  beginning of the  file, and returns  the value
 =BUCKET-NAME= or nil if not found.

#+name: get-bucket-name
#+header: :results value
#+begin_src emacs-lisp
   (save-excursion
     (goto-char (point-min))
     (re-search-forward "^#\\+bucket:\\s*?\\(.*\\)$" nil t)
     (match-string-no-properties 1))
#+end_src

For some reason, ~get-bucket-name~ does not  work when called from the headline
[[#project-index-links][=Links for  bucket=]] below  when creating  =index.html=, even  if it  returns as
~(prin1 ...)~ and is  set up to ~:return output~; the  call receives =nil=. The
following code from ~bucket-name~, however, works. I don't know why.

#+name: bucket-name
#+header: :results output
#+header: :var bucket-name=get-bucket-name()
#+begin_src emacs-lisp
(prin1 bucket-name)
#+end_src

*** Bucket HTTPS URL
This  code calls  ~get-bucket-name~ and  returns the  value returned  as a  URL
string or nil.

#+name: bucket-https-url
#+header: :results value
#+header: :var b=get-bucket-name()
#+begin_src emacs-lisp
(concat "https://" b)
#+end_src

*** S3 Bucket URL
This code calls ~get-bucket-name~ and returns the AWS S3 bucket url.

#+name: s3-bucket-url
#+header: :results value
#+header: :var b=get-bucket-name()
#+begin_src emacs-lisp
(concat "s3://" b)
#+end_src

*** Bucket Projects List
This code uses the ~s3-bucket-url~ result to obtain the list of projects in the
bucket.  It does  this by calling the  AWS S3 high-level command  ~ls~ and then
removing the  =PRE= string in  each result.  The result  that is returned  is a
single  string that  can be  separated into  individual links  by breaking  the
string on spaces.

#+name: bucket-projects-list
#+header: :results output
#+header: :var bucket=s3-bucket-url()
#+begin_src sh
/usr/local/bin/aws s3 ls ${bucket} | sed -ne 's/^.*PRE //p'
#+end_src

*** Bucket Project Links
This code  uses the result  from ~bucket-projects-list~ to create  an unordered
list of  links written to  bucket projects, written  in Org-mode syntax.  It is
executed by a =#+call:= in [[*Bucket Index][*Bucket  Index]] during an HTML export of that subtree
to a file called =index.html=.

#+name: bucket-project-links
#+header: :var b-url=bucket-https-url()
#+header: :var projects=bucket-projects-list()
#+header: :results output raw
#+begin_src emacs-lisp
(seq-do (lambda (u) (princ (format "- [[%s/%sindex.html][~%s~]]
" b-url u u))) (split-string projects))
#+end_src

*** Bucket Index
    :PROPERTIES:
    :custom_id: project-index-title
    :export_file_name: index.html
    :export_subtitle: {{{version}}} created {{{upload-date}}}
    :END:
#+html_doctype: html5
#+options: toc:nil html5-fancy:t

#+html: <hr>

**** Links for bucket call_bucket-name()
     :PROPERTIES:
     :unnumbered: t
     :custom_id: project-index-links
     :END:

#+call: bucket-project-links()
** Project Readme
This adds the README.md template to a project. It should be customized uniquely
for the project.

#+name:project-readme
#+header: :tangle README.md
#+begin_src markdown
# TITLE
## Subtitle
## Author
## Date
## Version
# ABSTRACT
This is the Org Template file.	It is the parent of all other Org Info blogs,
and provides the source code for processing them in various different ways.
# INTRODUCTION
# CHAPTER
## Section
### Subsection
#+end_src

** Boot Template
:PROPERTIES:
:dependency1: EMACS:=:/Applications/MacPorts/Emacs.app/Contents/MacOS/Emacs or similar
:dependency2: EDITOR:=:emacsclient
:dependency3: =SYNC_ORG_TEMPLATE= defined as $DEV/Templates/Org/Template.org
:END:
Although running the command ~org-babel-tangle~ (=C-c C-v t=) from within Emacs
will install  everything, it would  be nice to have  a simple Makefile  that is
downloaded with this  file that could be  invoked to do the  same thing without
starting Emacs and Org-mode and keying in the ~org-babel-tangle~ command.  This
little Makefile should be stored on  GitHub along with the ~Template.org~ file.
When  the source  is extracted  to a  directory, then  running this  Makefile's
default rule  as simply ~make~  will extract the ~preprocess.el~  script, which
updates  =DEV= and  then  extracts the  full Makefile.   Because  this file  is
tangled along with the full Makefile, it simply gets tacked onto the end of the
big Makefile as an additional rule.   Now, running ~make~ runs the default rule
from the  main Makefile, which is  to extract everything, then  export to TEXI,
INFO, HTML, and PDF forms.

It is assumed that an Emacs server is running, and that the $EDITOR environment
variable is set to use ~emacsclient~.

#+name:boot-template
#+header: :tangle Makefile
#+begin_src makefile
  boot:
	  $(EDITOR) -u --eval \
		  "(with-current-buffer (car (find-file-noselect \"./*.org\" nil nil t)) \
			  (goto-char (point-min)) \
			  (re-search-forward \"^#[+]name:preprocess.el$$\") \
			  (org-babel-tangle (quote (4))) \
			  (save-buffer) \
			  (kill-buffer))" \
	  --eval \
		  "(let ((rsrcdir \"resources\") \
			 (subdirs (list \"tools\" \"images\"))) \
		     (mkdir rsrcdir t) \
		     (dolist (subdir subdirs) (mkdir (concat rsrcdir \"/\" subdir) t)))"
	  ./resources/tools/preprocess.el
#+end_src

** Preprocess Env Vars
The environment variable DEV can be  in different locations and will be spelled
differently based  on how the  local machine is set  up.  For instance,  on one
system,  it will  be at  ~$HOME/Dev~  while in  another  system it  will be  at
~/usr/local/dev~.  However, the =:tangle= keyword  does not expand variables in
the form ~${DEV}~,  but rather requires absolute  paths, like ~/usr/local/dev~.
Therefore, this program works like a preprocessor for environment variables set
up  as part  of  =:tangle= lines,  changing them  to  their system  environment
variable values prior to tangling.  It lives in the ~resources/tools~ directory.

#+name:preprocess.el
#+header: :mkdirp t
#+header: :tangle resources/tools/preprocess.el
#+header: :shebang "#!/opt/local/bin/emacs -Q --script"
#+begin_src emacs-lisp
  (with-current-buffer (car (find-file-noselect "./*.org" nil nil t))
    (save-excursion
    (goto-char (point-min))
    (let ((re-search-str "\\(?::tangle\\|load-file \\(?:[\\]*\\)?[\"]\\)\s*\\(.*?/[dD]ev\\)/")
          (dev (getenv "DEV")))
      (while
              (re-search-forward re-search-str nil t)
              (replace-match dev t nil nil 1)))
    (save-buffer)
    (require 'org)
    (org-babel-tangle)))
#+end_src

** Samples
#+begin_comment
(cd "~/Dev/Emacs/MasteringEmacs/")
"/Users/pine/Dev/Emacs/MasteringEmacs/"

(defun add-bucket (org bucket)
  "Add a bucket keyword BUCKET to the org file ORG."
  (interactive "fFile: \nsBUCKET: ")
  (with-current-buffer (find-file-noselect org)
    (let* ((tree (org-element-parse-buffer))
	   (ins (car (org-element-map tree (quote section)
		 (lambda (s)
		   (org-element-map s (quote keyword)
		     (lambda (kw) (when (equal "MACRO" (org-element-property :key kw)) (1- (org-element-property :end kw))))
		     nil nil :keyword))
		 nil t nil nil))))
      (goto-char ins)
      (insert (format "#+bucket:%s\n" bucket))
      ())))

(add-bucket "MasteringEmacs.org" "pinecone-forest")
nil

(defun hl-region (raw-hl)
  "Obtain the begin and end positions for a headline."
  (with-current-buffer (find-file-noselect (getenv "SYNC_ORG_TEMPLATE"))
    (let* ((tree (get-parsed-tree))
	   (hl (car-safe (org-element-map tree 'headline
			   (lambda (hl) (when
					    (string= raw-hl
						     (org-element-property :raw-value hl))
					  (org-element-context)))
			   nil nil t))))
      (cons
       (org-element-property :begin hl)
       (org-element-property :end hl))
      )))

(hl-region "Build Tools")

(4888 . 29646)

(defun get-hl-with-prop (org-dir hl-prop)
  "Given a directory containing an Org template file and a custom_id property name, return the headline containing that custom_id, or nil if none."
  (progn
    (cd org-dir)
    (let ((org-buf (car-safe (find-file-noselect "*.org" nil nil t))))
      (if org-buf
	  (with-current-buffer org-buf
	    (let ((tree (org-element-parse-buffer)))
	      (org-element-map tree 'headline
		(lambda (hl)
		  (let ((cid (org-element-property :CUSTOM_ID hl)))
		    (when (string= hl-prop cid)
		      (and
		       (message (format "Found the headline %s containing property %s." (org-element-property :raw-value hl) hl-prop))
		       hl))))
		nil t)))
	(and
	 (message (format "The directory %s does not contain an Org file." org-dir))
	 nil)))))

(get-hl-with-prop "~/Dev/Templates/Org" "build-tools")

(headline (:raw-value "Build Tools" :begin 4888 :end 29646 :pre-blank 0 :contents-begin 4902 :contents-end 29645 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4888 :FROM-FILE "Template" :CUSTOM_ID "build-tools" :APPENDIX "t" :title "Build Tools"))









;;; Add a keyword named 'bucket' just after the version macro.
;;; This function should be run from within the directory containing the Org file.
(defun add-bucket (org-file s3-bucket)
  "Add the name of the associated AWS S3 bucket to an Org templated file."
  (with-current-buffer (find-file-noselect org-file)
    (goto-char (point-min))
    (let* ((tree (org-element-parse-buffer))
	   ;; find the beginning position of the first headline to act as a limit
	   (hl1 (org-element-map tree (quote headline) (lambda (hl) (org-element-property :begin hl)) nil t)))
      ;; Check for the presence of a bucket keyword before the first headline
      (unless (re-search-forward "^#\\+bucket:" hl1 t)
	;; If no bucket keyword is found, search for a keyword MACRO with the value 'version'
	(org-element-map tree (quote keyword)
	  (lambda (kw) (when (and (string= "MACRO" (org-element-property :key kw))
				  (string-match-p "version" (org-element-property :value kw)))
			 ;; return the end position of the MACRO; subtract an empty line if there is one
			 (goto-char (- (org-element-property :end kw) (org-element-property :post-blank kw)))
			 (insert "#+bucket:" s3-bucket)
			 (newline)
			 (basic-save-buffer)
			 (message (format "Added bucket %s" s3-bucket))))
	  nil t)))))

(add-bucket "MasteringEmacs.org" "pinecone-forest.com")
nil

"Added bucket pinecone-forest.com"









(keyword (:key "MACRO" :value "version Version 0.0.108" :begin 148 :end 181 :post-blank 1 :post-affiliated 148 ...))
("TITLE" "SUBTITLE" "AUTHOR" "DATE" "MACRO" "TEXINFO" "TEXINFO" "CINDEX" "CINDEX" "CINDEX" "CINDEX" "CINDEX" ...)







((keyword (:key "MACRO" :value "version Version 0.0.107" :begin 148 :end 181 :post-blank 1 :post-affiliated 148 ...)))
#+end_comment

* Concept Index
  :PROPERTIES:
  :index:    cp
  :unnumbered: t
  :END:

* Function Index
:PROPERTIES:
:unnumbered: t
:index:    fn
:END:

* Macro Definitions                                                :noexport:
#+macro:noindent @@texinfo:@noindent @@
#+macro:samp @@texinfo:@samp{@@$1@@texinfo:}@@

* Export Settings                                                  :noexport:

** OPTIONS

   #+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
   #+OPTIONS: html-preamble:t html-scripts:t html-style:t
   #+OPTIONS: html5-fancy:t tex:t
   #+OPTIONS: H:4
   #+INFOJS_OPT:

** GENERAL

   #+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.1 (<a href="https://orgmode.org">Org</a> mode 9.1.14)

** TEXINFO EXPORTS

   #+TEXINFO_FILENAME:mastering_org.info
   #+TEXINFO_CLASS: info
   #+TEXINFO_HEADER:
   #+TEXINFO_POST_HEADER:
   #+SUBAUTHOR:
   #+TEXINFO_DIR_CATEGORY:Org-Mode
   #+TEXINFO_DIR_TITLE:Mastering Org-Mode
   #+TEXINFO_DIR_DESC:How to master org-mode in a decade
   #+TEXINFO_PRINTED_TITLE:How To Master Org-Mode In A Decade

** LATEX EXPORTS

   #+LATEX_CLASS: article
   #+LATEX_CLASS_OPTIONS:
   #+LATEX_HEADER:
   #+LATEX_HEADER_EXTRA:
   #+DESCRIPTION:
   #+KEYWORDS:
   #+SUBTITLE:
   #+LATEX_COMPILER: pdflatex

** HTML EXPORTS

   #+HTML_DOCTYPE: html5
   #+HTML_CONTAINER: div
   #+DESCRIPTION:Some notes about Org-mode
   #+KEYWORDS:org-mode
   #+HTML_LINK_HOME:
   #+HTML_LINK_UP:
   #+HTML_MATHJAX:
   #+HTML_HEAD:
   #+HTML_HEAD_EXTRA:

** MACROS

#+MACRO:noindent @@texinfo:@noindent@@
#+MACRO:code @@texinfo:@code{@@$1@@texinfo:}@@
#+MACRO:samp @@texinfo:@samp{@@$1@@texinfo:}@@

* Local Variable Settings                                          :noexport:
# Local Variables:
# time-stamp-pattern: "8/^\\#\\+date:%:y-%02m-%02d %02H:%02M$"
# End:
